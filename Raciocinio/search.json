[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ensinando Raciocínio Algorítmico em Tempos de Inteligência Artificial",
    "section": "",
    "text": "Este estudo propõe a implementação de uma disciplina introdutória de Raciocínio Algorítmico para cursos de Ciência e Engenharia da Computação, fundamentada em uma metodologia DAAD (Decomposição, Abstração, Algoritmização e Depuração). O objetivo é desenvolver o Pensamento Computacional nos alunos, uma habilidade reconhecida acadêmica e globalmente por sua importância para a resolução de problemas complexos no século XXI.\nO trabalho explora a integração crescente do Pensamento Computacional em currículos de universidades renomadas nos EUA, Reino Unido, Europa e China, destacando uma mudança do foco exclusivo na programação para uma compreensão mais ampla dos princípios computacionais.\nPara a prova de conceito, foi criada uma estrutura curricular detalhada para uma disciplina, chamada de Raciocínio Algorítmico de \\(80\\) horas. Este projeto foi criado com metodologia DAAD, a experiência de \\(20\\) anos de aulas do autor em Universidades da Cidade de Curitiba. A disciplina está dividida em \\(4\\) módulos de ensino com conteúdo e exercícios que progridem do conceitual ao prático, enfatizando a aplicação de cada componente DAAD. Além disso, o estudo sugere que essa metodologia pode ser generalizada para outras disciplinas de graduação em ciências, matemática e engenharia. Finalmente este estudo inclui um conjunto de problemas resolvidos como exemplos de aplicação prática da metodologia DAAD para cada módulo da disciplina proposta.\nAs estratégias pedagógicas recomendadas incluem aprendizagem ativa, atividades unplugged e plugged, e oportunidades para o fomento da colaboração. Além disso, o estudo conclui que os processos de avaliação devem ser abrangente, direcionada e, ao mesmo tempo diversificados. Entretanto, a estrutura de avaliação deve ser exclusiva do professor e não faz parte deste estudo.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Resumo</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introdução: Pensamento Computacional e a Metodologia DAAD",
    "section": "",
    "text": "2.1 A Jornada Inacabada: O Problema do Ensino do Raciocínio Algorítmico\nAs críticas ao ensino de Raciocínio Algorítmico aparecem de forma relevante na academia a partir das últimas décadas do século XX. Os estudos pioneiros de Lithner (2008)(6) destacaram que o ensino tradicional prioriza Raciocínio Algorítmico Imitativo, no qual alunos reproduzem procedimentos memorizados, em inglês Familiar Algorithmic Reasoning, em detrimento do Raciocínio Matemático Criativo. Neste último o aluno resolve o problema criando novas soluções a partir da combinação de conhecimentos díspares. Essa abordagem suprime a capacidade de decompor problemas e construir soluções originais, perpetuando uma cultura de superficialidade cognitiva (7). Os trabalhos de Lithner (2008)(6) e Harisman (2023) indicam que o ensino por imitação é parte significativa do problema. Mas, não é a única.\nPesquisas em educação matemática indicam que o ensino baseado em Raciocínio Algorítmico Imitativo pode comprometer a originalidade dos estudantes na solução de problemas novos. Isso ocorre porque a dependência de algoritmos predefinidos limita a capacidade de adaptação e inovação dos alunos diante de situações inéditas. Conforme Hurrell (2021)(8), o conhecimento procedimental, como fazer, caracterizado por sequências fixas de ações repetidas, não garante a compreensão necessária para gerar novas estratégias ou adaptar as conhecidas a novos problemas, o que reduz a originalidade na resolução.\nAlém disso, o National Council of Teachers of Mathematics, em seus Princípios e Padrões para a Matemática Escolar enfatiza que a aprendizagem matemática deve ir além do domínio de procedimentos algorítmicos e procedurais, promovendo a compreensão conceitual e a flexibilidade cognitiva(9). O documento alerta que a dependência excessiva de algoritmos e regras fixas pode inibir a transferência de conhecimentos para contextos inéditos e a capacidade de resolver problemas de forma criativa e inovadora (9).\nEstudos empíricos, ainda mais antigos, indicam que estudantes treinados predominantemente com técnicas algorítmicas apresentam até \\(32/%\\) menos originalidade na solução de problemas novos, em comparação com aqueles que desenvolvem compreensão conceitual e estratégias flexíveis (10).\nFinalmente existem críticas sobre a capacidade e eficiência da compreensão. O livro Programming: The Derivation of Algorithms (11) expôs como o ensino imperativo tradicional foca na sintaxe de laços de repetição e invariantes, usando a lógica de Hoare, negligenciando a construção de entendimento conceituais fundamentais. Essa metodologia foi criticada por substituir o “porquê” pelo “como”, limitando o pensamento computacional profundo (12). A Table 2.1 resume as principais críticas ao ensino tradicional de Raciocínio Algorítmico.\nUm problema mais recente para a criação das competências que levem ao Raciocínio Algoritmico e ao Pensamento Computacional parece estar relacionado com a Inteligência Artificial.\nO interesse na pesquisa de soluções de Inteligência Artificial que segundo a Figure 2.1 se acentuou a partir de \\(2010\\).\nEste crescimento teve impacto na disponibilidade destas tecnologias, o que pode ser corroborado se consideramos o aumento do uso de dispositivos contendo soluções embarcadas de Inteligência artificial como pode ser visto na Figure 2.2.\nEsta velocidade de adaptação parece ter impactos negativos no binômio ensino-aprendizagem de forma geral em todos os cursos e formações.\nUm estudo recente conduzido pelo MIT Media Lab, intitulado Your Brain on ChatGPT: Accumulation of Cognitive Debt when Using an AI Assistant for Essay Writing Task2, publicado em junho de 2025, investigou os impactos do uso de modelos de linguagem grandes (LLMs), como o ChatGPT, na cognição humana, especificamente no contexto da escrita de ensaios(15). O estudo, ainda em forma de preprint e não revisado por pares, envolveu \\(54\\) participantes divididos em três grupos: um que utilizou o ChatGPT, outro que usou ferramentas de busca tradicionais e um terceiro que escreveu sem qualquer auxílio. Os resultados indicaram que os participantes que utilizaram o ChatGPT apresentaram menor atividade cerebral, menor retenção de memória e menor originalidade em seus escritos em comparação com os outros grupos(15). Além disso, o estudo sugeriu que o uso prolongado de LLMs pode levar a uma “dívida cognitiva”, com possíveis implicações a longo prazo para o aprendizado e o desenvolvimento cognitivo. No entanto, devido às limitações do estudo, como o tamanho da amostra e o foco específico no ChatGPT, os achados devem ser interpretados com cautela, e mais pesquisas são necessárias para generalizar os resultados (15).\nO estudo de SILVA QUINTO, W. A. et al. (16) investiga o impacto da Inteligência Artificial no desenvolvimento do pensamento crítico entre estudantes de Tecnologia da Informação na Região Norte do Brasil. Utilizando uma abordagem de métodos mistos, a pesquisa coletou e analisou respostas de \\(101\\) estudantes para entender suas percepções sobre o papel da Inteligência Artificial na sua formação acadêmica. Os resultados revelam que uma grande maioria (\\(88,\\1%\\)) reconhece a influência da Inteligência Artificial em seus estudos, com quase metade (\\(47,3\\%\\)) acreditando que as ferramentas de Inteligência Artificial facilitam a aprendizagem. No entanto, uma menor porção (\\(13,2\\%\\)) expressa preocupações de que a Inteligência Artificial pode impedir o desenvolvimento do pensamento crítico(16).\nO artigo Teaching AI with games: the impact of generative AI drawing on computational thinking skills3, publicado em 2025 investiga o impacto do uso de ferramentas generativas de Inteligência Artificial, como ferramentas generativas para desenho, no desenvolvimento de habilidades de Pensamento Computacional em \\(56\\) alunos do sexto ano de escolas no norte de Taiwan(17). Divididos em dois grupos: o experimental usando estas ferramentas com Inteligência Artificial embarcada e programação baseada em blocos para criar jogos; e o grupo de controle controle, usando ferramentas de busca disponíveis na internet. Os resultados indicaram que o grupo que usou Inteligência Artificial apresentou \\(23\\%\\) menos domínio em abstração e uso de padrões lógicos, embora tenha completado tarefas mais rapidamente. A pesquisa sugere que a Inteligência Artificial (IA) acelera a execução, mas reduz a cognição lógica(17). Ainda que os autores tenham usado o termo Pensamento Algorítmico com sinônimo do conceito que aqui chamamos de Raciocínio Algorítmico, é preciso ressaltar que o artigo destaca necessidade de integrar essas ferramentas de forma equilibrada para promover habilidades de estão intimamente relacionadas com o Pensamento Computacional.\nNem tudo são críticas, ao longo do tempo foram realizadas tentativas de resolver os problemas do ensino de Raciocínio Algorítmico. Duas abordagens que se destacam: a Constructive Algorithmics, que em português poderia ser traduzida como algorítmica construtiva, e a Computação unplugged.\nA abordagem Constructive Algorithmics, desenvolvida por Richard Bird e Oege de Moor em 1997@BirdDeMoor1997, fundamenta-se no uso de raciocínio equacional e princípios da álgebra de programas por meio de uma abordagem matemática para a construção de programas de computador, tratando a programação como uma disciplina de engenharia e não como uma arte baseada em tentativa e erro(13). Esta metodologia prioriza a correção formal e a elegância matemática, permitindo a construção de algoritmos por meio de transformações verificáveis passo a passo. Um exemplo emblemático é a derivação de algoritmos de ordenação, como quicksort, via composição funcional, onde propriedades matemáticas garantem robustez lógica. Jeremy Gibbons 2020@GibbonsHaskell2020 aplicou esses mesmos princípios em Algorithm Design with Haskell4.\nA computação unplugged emerge como contraponto pedagógico, utilizando atividades manuais, como jogos de tabuleiro para decomposição de problemas e atividades com lápis e papel, para desenvolver bases conceituais do pensamento computacional. Estudos empíricos comprovam ganhos de até \\(37\\%\\) no pensamento sistêmico e computacional. Os alunos internalizam conceitos abstratos, recursão, paralelismo, por meio de manipulação física e erro reflexivo (18). Porém sua eficácia decai em problemas de alta complexidade, como problemas de programação dinâmica ou otimização combinatorial, nos quais a abstração simbólica é indispensável. Por outro lado, estudos comparativos, como Unplugged versus plugged-in: examining basic programming achievement and computational thinking of 6th-grade students5(19), demonstram que a falta de transição para ferramentas digitais limita a aplicação prática: alunos dominam puzzles com blocos, mas falham em traduzir lógica para código em problemas do mundo real, expondo uma fratura escalar no modelo (20).\nA Table 2.2 resume as principais diferenças entre as abordagens Constructive Algorithmics e Computação unplugged.\nDa ambiguidade, surge a integração híbrida como caminho promissor: iniciam-se com atividades não digitais, ou eletrônicas, para fundamentos e migra-se para Constructive Algorithmics com extensões críticas — como análise de vieses em algoritmos reais. Bird e de Moor em 1997@BirdDeMoor1997 já forneceram base para isso: seu método equacional pode ser estendido enquanto Gibbons (2020)(21) oferece ferramentas para essa transição ao usar Haskell em exemplos aplicados.\nDas pesquisas citada é possível inferir que ensino de Raciocínio Algorítmico e Pensamento Computacional permanece irresoluto porque supervaloriza eficiência em detrimento da crítica: nas décadas de \\(1980\\) a \\(2000\\), pedagogias formaram gerações capazes de implementar BubbleSort, mas não de questionar por que usá-lo (21). Hoje, sistemas baseados em Inteligência Artificial agravam a superficialidade cognitiva (17).\nHoje, em julho de 2025, o cenário educacional ainda carece de uma abordagem unificada e estruturada para o ensino do Pensamento Computacional e do Raciocínio Algorítmico. A falta de uma metodologia clara, eficaz e prática para o ensino desses conceitos fundamentais limita o desenvolvimento das habilidades necessárias para a resolução de problemas computacionais. Dessa forma, este estudo propõe a criação de uma disciplina introdutória que utiliza a metodologia DAAD como base para o desenvolvimento dessas competências, visando preencher essa lacuna no ensino superior. Uma disciplina que poderá ser chamada de Raciocínio Algorítmico.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introdução: Pensamento Computacional e a Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "intro.html#sec-problema",
    "href": "intro.html#sec-problema",
    "title": "2  Introdução: Pensamento Computacional e a Metodologia DAAD",
    "section": "",
    "text": "Table 2.1: Estudos e possíveis razões por trás dos problemas persistentes no ensino de Raciocínio Algorítmico.\n\n\n\n\n\n\n\n\n\n\nFator\nImpacto Histórico\nEvidência Atual\n\n\n\n\nCurrículos Baseados em Eficiência\nPriorização de otimização (ex: complexidade O(n)) sobre metacognição.\nAlgoritmos como QuickSort são ensinados como fórmulas pré-definidas, sem discussão ou cognição (12).\n\n\nFalta de Formação Docente\nProfessores reproduzem métodos tradicionais por falta de treino em pedagogia criativa.\nEstudos mostram que educadores não dominam técnicas para mitigar dependência de Inteligência Artificial (13)\n\n\nInfraestrutura Cognitiva\nModelos mentais baseados em Raciocínio Algorítmico Imitativo dificultam a transição para Raciocínio Matemático Criativo.\nMeta-análises confirmam baixa transferência de conceitos algorítmicos entre domínios [(7)](14)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.1: Gráfico mostrando a evolução de publicações sobre Inteligência Artificial por tipo de publicação (2).\n\n\n\n\n\n\n\n\n\n\nFigure 2.2: Gráfico mostrando a evolução do número de dispositivos médicos contendo Inteligência Artificial embarcada segundo os dados da (2).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 2.2: Comparação entre as abordagens Constructive Algorithmics e Computação unplugged.\n\n\n\n\n\n\n\n\n\n\n\nAbordagem\nDescrição\nPontos Fortes\nLimitações\n\n\n\n\nAlgorítmica Construtiva\nUsa raciocínio equacional e álgebra de programas para derivar algoritmos em linguagens funcionais como Haskell (21).\nRigor matemático, correção formal, elegância na derivação de algoritmos (ex.: quicksort).\nDescontextualização ética, negligencia impactos sociais.\n\n\nComputação Unplugged\nUtiliza atividades manuais (ex.: jogos de tabuleiro) para ensinar pensamento computacional (19).\nGanhos de até 37% no pensamento sistêmico, internalização intuitiva de conceitos (recursão, paralelismo).\nIneficaz em problemas complexos (ex.: programação dinâmica), limitada transição para ferramentas digitais.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introdução: Pensamento Computacional e a Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "intro.html#primeiro-contato-com-a-metodologia-daad",
    "href": "intro.html#primeiro-contato-com-a-metodologia-daad",
    "title": "2  Introdução: Pensamento Computacional e a Metodologia DAAD",
    "section": "2.2 Primeiro Contato com a Metodologia DAAD",
    "text": "2.2 Primeiro Contato com a Metodologia DAAD\nA metodologia DAAD (Decomposição, Abstração, Algoritmização e Depuração), aqui proposta, estende uma discussão da Cambridge Mathmatics (1) e a análise feita por LEHMANN (2024)(22), sob os efeitos da algoritmização. O que este estudo propõe difere dos estudos anteriores por apresentar um framework prático iterativo de ações, exercícios e temas de estudo com o intuito de permitir a criação de Pensamento Computacional e Raciocínio Algorítmico em alunos de graduação, baseado nos estudos teóricos e empíricos de Wing (2006)(23), Lehmann (2023, 2024)(24),(22) e KONG, Siu-Cheung et al. (2019)(25) e muitos outros que citados ao longo do trabalho, sobre temas que abordam o Raciocínio Algorítmmico e o Pensamento Computacional. Para tanto, este framework está estruturado em quatro estágios iterativos:\n\nDecomposição (D): processo de fragmentação de problemas complexos em subproblemas gerenciáveis, seguindo princípios de divisão funcional ou estrutural. Exemplo: Quebrar um sistema de recomendação em: coleta de dados, filtragem, ranking e interface. Wing (2006)(23), SBC (2017)(26) e Lehmann (2024)(22) estabelecem decomposição como pilar cognitivo essencial.\nAbstração (A): identificação seletiva de padrões e invariantes essenciais, com descarte consciente de detalhes irrelevantes ao núcleo do problema. Exemplo: Modelar tráfego urbano considerando apenas fluxo veicular médio, ignorando marcas e combustível. Baseia-se no conceito de “abstração progressiva” perceptível na Linguagem LOGO de Papert (1985)(27).\nAlgoritmização (A): formulação de soluções por meio de sequências lógico-operacionais, garantindo completude e implementabilidade. Exemplo: Projetar heurística para otimização de rotas usando grafos valorados e seleção gulosa. Alinha-se ao paradigma de descrição de estados finais. A essência do projeto algorítmico reside na descrição formal de estados finais, onde a corretude é verificada pelo atendimento inequívoco de pós-condições [(28)](13).\nDepuração (D): refinamento iterativo mediante validação empírica, incluindo testes de robustez, análise de falhas e otimização pós-implementação. Exemplo: Injeção de dados corrompidos em pipelines de processamento para validar resiliência. Incorpora princípios de “engenharia resiliente” de Leveson (2012)(29).\n\nEm um ambiente no qual existem ambiguidades e críticas sobre a formação fundamental do dos alunos de graduação, a metodologia DAAD foca prioritariamente nos processos matemáticos e lógicos envolvidos na criação e depuração de soluções computacionais como ferramentas indispensáveis para a solução de problemas.\nA busca bibliográfica realizada para este estudo indicou que a metodologia DAAD como está proposta parece ser a única ferramenta disponível que oferece uma estrutura prática iterativa para o ensino do Raciocínio Algorítmico, abordando tanto a decomposição de problemas quanto a abstração necessária para a criação de algoritmos eficazes e, principalmente, depuração. A relação e integração conceitual entre os componentes da metodologia DAAD (Decomposição, Abstração, Algoritmização e Depuração) está ilustrada na Figure 2.3\n\n\n\n\n\n\nFigure 2.3: Ilustração da inter-relação entre Decomposição, Abstração, Algoritmização e Depuração. fonte:o autor.\n\n\n\nO Pensamento Computacional é um termo amplo que abrange não apenas a criação de algoritmos, mas também a compreensão de como os computadores processam informações e resolvem problemas (23). Neste contexto, Raciocínio Algorítmico, uma parte fundamental do Pensamento Computacional, a habilidade de desenvolver instruções passo a passo para resolver problemas, generalizando processos e antecipando impactos de cada etapa (24), criando soluções sistemáticas e eficientes. Contudo, em português parece existir uma fronteira muito tênue entre o que se quer dizer com Pensamento Computacional e Raciocínio Algorítmico.\nEm sua pesquisa RIBEIRO, L. et al (2017)(30) diferenciam raciocínio lógico, fundamentado em premissas e inferências, do raciocínio computacional, focado em abstração, automação e análise enquanto criticam a redução do Pensamento Computacional à criação de algoritmos, ressaltando que o Raciocínio Algorítmico é apenas um dos pilares do Pensamento Computacional, não sua totalidade. KONG, S. et al.@Kong2019 destacam que o Raciocínio Algorítmico é frequentemente confundido com o Pensamento Computacional por ser seu elemento mais tangível, especialmente em contextos de programação. Mais tarde estes mesmos autores alertam que essa visão reduz o Pensamento Computacional a habilidades técnicas, negligenciando pilares como a decomposição de problemas e o pensamento crítico(31). O estudo de MEDEIROS (2024)(32) analisou \\(38\\) trabalhos brasileiros sobre Pensamento Computacional (2018–2024) e identificou que \\(76\\%\\) deles equiparavam Pensamento Computacional ao ensino de algoritmos, via Scratch ((33)) ou aplicações de robótica. Concluindo que a ênfase excessiva no Raciocínio Algorítmico subestima outros pilares do Pensamento Computacional, tais como pensamento algébrico e resolução criativa de problemas (26).\nUma questão interessante surge do trabalho de Hora (2022)(34) que destaca que no Brasil o Pensamento Computacional é frequentemente restrito a disciplinas de exatas, Matemática e Computação, nas quais o Raciocínio Algorítmico domina as práticas pedagógicas criticando o viés tecnicista que ignora dimensões como abstração contextualizada e crítica sociotécnica. Destacando a abrangência do Pensamento Computacional. Dessa forma Hora (2022)(34) sustenta os trabalhos de Wing (2006)(23) e (24). Além disso, Felipussi e Padua (2023)(35) perceberam que os professores tendem a associar Pensamento Computacional diretamente à programação de robôs, tratando algoritmo como sinônimo de Pensamento Computacional.\nA própria Sociedade Brasileira de Computação (2017)(26) adverte que a BNCC (Base Nacional Comum Curricular) não distingue claramente Raciocínio Algorítmico e Pensamento Computacional, gerando ambiguidade em propostas pedagógicas e recomenda equilibrar o ensino de algoritmos com atividades de decomposição de problemas não lineares.\nFinalmente, existem trabalhos que indicam que a ambiguidade entre Pensamento Computacional e Raciocínio Algorítmico pode ter consequências negativas na formação do indivíduo.\nDo trabalho de Medeiros (2024)(32) podemos inferir que os estudantes desenvolvem habilidades técnicas (ex.: codificar em blocos) mas falham em aplicar Pensamento Computacional em contextos interdisciplinares. As humanidades e artes raramente integram Pensamento Computacional em seus currículos, pois o Raciocínio Algorítmico é visto como não aplicável (36). Por fim, as avaliações de Pensamento Computacional focam em correção algorítmica e eficiência do código, não em processos mentais como abstração (25).\nÉ necessário considerar que o termo Pensamento Computacional foi popularizado por Jeannette Wing, em 2006@Wing2006, argumentando que o Pensamento Computacional deveria ser considerado uma habilidade indispensável para todos, comparável à leitura, escrita e aritmética. Conceito no qual ela é apoiada por Saidin (2021)(37) e pela Computer Science Teachers Association@CSTA2011a. O Pensamento Computacional é reconhecido globalmente como uma das habilidades vitais para o século XXI, essencial para a resolução de problemas complexos em diversas áreas (38). O que pode ser corroborado com a pesquisa bibliográfica, realizada via internet,em sites de universidades nos EUA, Reino Unido, Europa e China. Esta pesquisa demonstrou uma tendência crescente na integração do Pensamento Computacional nos currículos de graduação, com ênfase em abordagens práticas e baseadas em projetos cujas características veremos na Chapter 3.\nA metodologia DAAD, modifica os tradicionais “Quatro Pilares do Pensamento Computacional” de Wing@Wing2006 ao substituir “Reconhecimento de Padrões” por “Depuração” concordando com Lehmann@Lehmann2024 e com a Cambridge Mathematics@CambridgeMaths. Essa mudança adequa o Pensamento Computacional ao Raciocínio Algorítmico enfatizando o processo ativo de criação de algoritmos e a habilidade crítica de detecção e correção de erros, a depuração. Criando uma metodologia iterativa adequada a solução de problemas em um ciclo de entendimento, abstração, construção da solução e depuração.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introdução: Pensamento Computacional e a Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "intro.html#a-disciplina-de-raciocínio-algorítmico",
    "href": "intro.html#a-disciplina-de-raciocínio-algorítmico",
    "title": "2  Introdução: Pensamento Computacional e a Metodologia DAAD",
    "section": "2.3 A Disciplina de Raciocínio Algorítmico",
    "text": "2.3 A Disciplina de Raciocínio Algorítmico\nO estudo propõe uma estrutura curricular detalhada para uma disciplina de \\(80\\) horas, dividida em módulos que progridem do entendimento conceitual com a aplicação prática de cada componente DAAD. Com a expectativa de que esta metodologia seja aplicada a todas as disciplinas dos cursos de graduação de Ciência e Engenharia da Computação, e generalizada para outros cursos relacionados a ciência, matemática e engenharia.\nAs estratégias pedagógicas recomendadas neste estudo incluem sala de aula invertida [BergmannSams2012], aprendizagem ativa(39), atividades unplugged e plugged6, e fomento da colaboração, visando aprofundar a compreensão e a capacidade de transferência de habilidades.\nO estudo dos métodos de avaliação fomenta a necessidade de um estudo posterior. Porém considerando os textos sobre Pensamento Computacional utilizados para construção do referencial teórico deste estudo é possível indicar que a avaliação desta disciplina deve ir além da correção do código, utilizando rubricas detalhadas para medir o crescimento das competências DAAD(41). Além disso, existem desafios, relacionados a preparação do corpo docente e o engajamento dos alunos que serão abordados apenas com a indicação de melhores práticas, destacando a necessidade de desenvolvimento profissional contínuo e a conexão do conteúdo com problemas do mundo real(42).\nEste trabalho está dividido em cinco partes principais e um conjunto de dez apêndices com propostas de atividades para uso em sala e para estudo complementar distribuídas de forma a atender as necessidades DAAD. As partes principais são: esta introdução; Chapter 3, na qua estão apresentadas os conceitos DAAD e o Pensamento Computacional em universidades dos EUA, Reino Unido, Europa e China; Chapter 5 discutindo as estratégias pedagógicas sugeridas na literatura, Chapter 4 na qual estão definidos os princípios da metodologia; Chapter 6, na qual está apresentado o projeto de uma disciplina de \\(80\\) horas com a metodologia DAAD, em dez subseções; e, por fim, Chapter 7, na qual estão apresentadas as conclusões do trabalho e recomendações para a implementação da disciplina.\n\n\n\n\n[1] CAMBRIDGE MATHS. Cambridge maths., [s.d.][s.d.]. Disponível em: &lt;https://www.cambridgemaths.org/&gt;. Acesso em: 12 jul. 2025\n\n\n[2] AI INDEX STEERING COMMITTEE. 2025 AI index report. Stanford, CA: Stanford Institute for Human-Centered Artificial Intelligence, 2025. Disponível em: &lt;https://hai.stanford.edu/ai-index/2025-ai-index-report&gt;. Acesso em: 10 jul. 2025.\n\n\n[3] CHUI, M. et al. The state of AI in 2022—and a half decade in review. [s.l.] McKinsey & Company, 2022. Disponível em: &lt;https://www.mckinsey.com/~/media/mckinsey/business%20functions/quantumblack/our%20insights/the%20state%20of%20ai%20in%202022%20and%20a%20half%20decade%20in%20review/the-state-of-ai-in-2022-and-a-half-decade-in-review.pdf&gt;. Acesso em: 10 jul. 2025.\n\n\n[4] BRASIL. Síntese de área: Ciência da computação (bacharelado/licenciatura). Brasília, DF: Ministério da Educação, Instituto Nacional de Estudos e Pesquisas Educacionais Anísio Teixeira (Inep), Diretoria de Avaliação da Educação Superior (Daes), 2021. Disponível em: &lt;https://download.inep.gov.br/educacao_superior/enade/relatorio_sintese/2021/Enade_2021_Relatorios_Sintese_Area_Ciencia_Computacao.pdf&gt;. Acesso em: 10 jul. 2025.\n\n\n[5] BRASIL. Relatório síntese de área: Engenharia de computação. Brasília, DF: Ministério da Educação, Instituto Nacional de Estudos e Pesquisas Educacionais Anísio Teixeira (Inep), Diretoria de Avaliação da Educação Superior (Daes), 2023. Disponível em: &lt;https://download.inep.gov.br/educacao_superior/enade/relatorio_sintese/2023/engenharia_de_computacao.pdf&gt;. Acesso em: 10 jul. 2025.\n\n\n[6] LITHNER, J. A research framework for algorithmic and creative reasoning. Educational Studies in Mathematics, v. 67, n. 3, p. 255–276, 2008. \n\n\n[7] HARISMAN, Y. et al. Exploring students’ mathematical reasoning behavior. Education Sciences, v. 13, 2023. \n\n\n[8] HURRELL, D. P. Conceptual knowledge OR procedural knowledge OR conceptual knowledge AND procedural knowledge: Why the conjunction is important for teachers. Australian Journal of Teacher Education, v. 46, n. 2, p. art. 4, 2021. \n\n\n[9] NATIONAL COUNCIL OF TEACHERS OF MATHEMATICS – NCTM. Principles and standards for school mathematics. Reston, VA: NCTM, 2000. \n\n\n[10] HIEBERT, J.; LEFEVRE, P. Conceptual and procedural knowledge in mathematics: An introductory analysis. In: HIEBERT, J. (Ed.). Conceptual and procedural knowledge: The case of mathematics. Hillsdale, NJ: Lawrence Erlbaum Associates, 1986. p. 1–27. \n\n\n[11] KALDEWAIJ, A. Programming: The derivation of algorithms. [s.l.] Prentice Hall, 1990. \n\n\n[12] GIBBONS, J. Algorithm design with haskell. University of Oxford, 2020. Acesso em: 10 jul. 2025\n\n\n[13] BIRD, R.; DE MOOR, O. Algebra of programming. [s.l.] Prentice Hall, 1997. \n\n\n[14] GÜNDOĞDU, F. et al. Exploring mathematical reasoning skills. ScienceDirect, 2023. \n\n\n[15] KOSMYNA, N. et al. Your brain on ChatGPT: Accumulation of cognitive debt when using an AI assistant for essay writing task., 2025. Disponível em: &lt;https://arxiv.org/abs/2506.08872&gt;\n\n\n[16] SILVA QUINTO, W. A. et al. Explorando o impacto da inteligência artificial na formação do pensamento crítico entre acadêmicos de t.i. Na região norte do brasil. Caderno Pedagógico, v. 22, n. 7, 2025. \n\n\n[17] HSU, T.-C.; CHANG, Y.-S.; CHEN, S.-Y. Teaching AI with games: The impact of generative AI drawing on computational thinking skills. Education and Information Technologies, 2025. \n\n\n[18] TSAI, C.-Y.; YANG, Y.-F. The impact of unplugged activities on developing computational thinking skills in elementary school students. Journal of Educational Technology & Society, v. 22, n. 3, p. 77–89, 2019. \n\n\n[19] POLAT, E.; YILMAZ, R. M. Unplugged versus plugged-in: Examining basic programming achievement and computational thinking of 6th-grade students. Education and Information Technologies, v. 27, p. 9145–9179, 2022. \n\n\n[20] BRACKMANN, C. P. et al. Unplugged versus plugged-in: Examining basic programming achievement and computational thinking of 6th-grade students. Journal of Computer Science Education, 2022. \n\n\n[21] GIBBONS, J. Functional algorithm design, part 0. SIGPLAN Blog, 2020. \n\n\n[22] LEHMANN, T. H. How current perspectives on algorithmic thinking can be applied to students’ engagement in algorithmatizing tasks. Mathematics Education Research Journal, v. 36, n. 3, p. 609–643, 2024. \n\n\n[23] WING, J. M. Computational thinking. Communications of the ACM, v. 49, n. 3, p. 33–35, Mar. 2006. \n\n\n[24] LEHMANN, T. H. Using algorithmic thinking to design algorithms: The case of critical path analysis. The Journal of Mathematical Behavior, v. 71, p. 101079, 2023. \n\n\n[25] KONG, S.-C. et al. Computational thinking education. Singapore: Springer, 2019. \n\n\n[26] SBC (SOCIEDADE BRASILEIRA DE COMPUTAÇÃO). Referenciais de formação em computação: Educação básica. Porto AlegreSBC, 2017. \n\n\n[27] PAPERT, S. Logo: Computadores e educação. São Paulo: Brasiliense, 1985. \n\n\n[28] HOARE, C. A. R. An axiomatic basis for computer programming. Communications of the ACM, v. 12, n. 10, p. 576–580, 1969. \n\n\n[29] LEVESON, N. G. Engineering a safer world: Systems thinking applied to safety. Cambridge, MA: MIT Press, 2012. \n\n\n[30] RIBEIRO, L. et al. Entendendo o pensamento computacional: Além da programação. Revista Brasileira de Informática na Educação, v. 25, n. 3, p. 45–62, 2017. \n\n\n[31] KONG, S. et al. Pensamento computacional na educação: Perspectivas internacionais. São Paulo: Penso, 2020. \n\n\n[32] MEDEIROS, W. M. Pensamento computacional ou programação? Uma análise de práticas pedagógicas com scratch. Dissertação (Mestrado em Educação)—Uberlândia: UFU, 2024.\n\n\n[33] SCRATCH FOUNDATION. Scratch., [s.d.][s.d.]. Disponível em: &lt;https://scratch.mit.edu/&gt;. Acesso em: 7 jul. 2025\n\n\n[34] HORA, N. DA. O ensino do pensamento computacional no brasil na era digital. Futura, 9 Feb. 2022. Disponível em: &lt;https://futura.frm.org.br/conteudo/professores/artigo/o-ensino-do-pensamento-computacional-no-brasil-na-era-digital&gt;. Acesso em: 9 jul. 2025\n\n\n[35] FELIPUSSI, A. L.; PADUA, C. C. S. Relato de aulas com robô programável e pensamento computacional. Anais do 12º congresso brasileiro de informática na educação. Anais...Recife: SBC, 2023. \n\n\n[36] FUTURA, C. P. O ensino do pensamento computacional no brasil na era digital. São Paulo: Fundação Roberto Marinho, 2023. \n\n\n[37] SAIDIN, N. D. et al. Benefits and challenges of applying computational thinking in education. International Journal of Information and Education Technology, v. 11, n. 5, p. 248–254, 2021. \n\n\n[38] COMPUTER SCIENCE TEACHERS ASSOCIATION. Computational thinking: A definition for k-12., 2011. Disponível em: &lt;https://csteachers.org/teaching-computational-thinking-in-early-elementary/&gt;. Acesso em: 7 jul. 2025\n\n\n[39] BONWELL, C. C.; EISON, J. A. Active Learning: Creating Excitement in the Classroom. Washington, D.C.: George Washington University, School of Education; Human Development, 1991. \n\n\n[40] BRENNAN, K.; RESNICK, M. New frameworks for studying and assessing the development of computational thinking. Proceedings of the 2012 annual meeting of the american educational research association. Anais...Vancouver, Canada: 2012. \n\n\n[41] ARA’UJO, A. L. S. DE O.; ANDRADE, W. L. DE; GUERRERO, D. D. S. Um mapeamento sistem’atico sobre a avaliaç ao do pensamento computacional no Brasil. Anais do v congresso brasileiro de inform’atica na educaç ao (CBIE). Anais...2016. \n\n\n[42] WEINTROP, D. et al. Defining computational thinking for mathematics and science classrooms. Journal of Science Education and Technology, v. 25, n. 1, p. 127–147, 2016.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introdução: Pensamento Computacional e a Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "2  Introdução: Pensamento Computacional e a Metodologia DAAD",
    "section": "",
    "text": "Algoritmização é um neologismo para traduzir o termo “Algorithmization” do inglês. A ideia é que seja um termo que remete à criação de algoritmos, ou seja, a construção de soluções sistemáticas e eficientes para problemas computacionais. É horrível, eu sei.↩︎\nem tradução livre “Seu Cérebro no ChatGPT: Acúmulo de Dívida Cognitiva ao Usar um Assistente de Inteligência Artificial para Tarefa de Escrita de Ensaio”.↩︎\nem tradução livre “Ensinando Inteligência Artificial com jogos: o impacto da Inteligência Artificial generativa no desenvolvimento de habilidades de pensamento computacional”.↩︎\nem tradução livre “Projeto de Algoritmos com Haskell”.↩︎\nem tradução livre Desplugado versus Plugado: examinando o desempenho em programação básica e o pensamento computacional de alunos do 6º ano↩︎\nUnplugged e plugged são termos usados para descrever atividades que não usam tecnologia digital, unplugged, e aquelas que usam tecnologia digital, plugged.↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introdução: Pensamento Computacional e a Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "inte.html",
    "href": "inte.html",
    "title": "3  Analisando Currículos Internacionais",
    "section": "",
    "text": "3.1 Universidades nos Estados Unidos\nA Carnegie Mellon University (CMU) é uma instituição pioneira na promoção do Pensamento Computacional, com Jeannette Wing como figura central nesta iniciativa. A universidade possui um centro específico para Pensamento Computacional dedicado (CARNEGIE MELLON, [s.d.]). A abordagem da CMU envolve PRoblem-Oriented Business Explorations, PROBESs, uma sigla em inglês para exploração de problemas orientados a negócio. Alunos quer resolvem estes problemas aplicam conceitos computacionais inovadores a problemas práticos para demonstrar o valor do Pensamento Computacional (CARNEGIE MELLON, [s.d.]). A disciplina Princípios da Computação (10 Créditos), introduzida em 2005, foca no estudo do processo de computação, não necessariamente na operação de um computador (WING, 2006). A disciplina Estrutura de Dados e Algoritmos (12 Créditos) espera que os alunos aprendam a decompor problemas. Além disso, busca desenvolver habilidades para acompanhar o progresso da solução, avaliar a correção do código e corrigir falhas por meio de depuração automatizada (Guzdial, 2015 apud KIM, 2021).\nEm disciplinas diretamente relacionadas com Ciência e Engenharia da Computação, a disciplina Codificação e Pensamento Computacional com VEX V5 (curso de extensão) utiliza atividades de programação estruturadas em contextos de projetos do mundo real, ensinando explicitamente a decomposição para simplificar a codificação complexa (CARNEGIE MELLON ROBOTICS ACADEMY, [s.d.]). A ênfase da CMU na aplicação do Pensamento Computacional para resolver problemas do mundo real transcende a mera compreensão. “Pensamento Computacional significa pensar algoritimicamente e com a habilidade de aplicar conceitos matemáticos, tais quais indução para desenvolver soluções mais eficientes, justas e seguras” (CARNEGIE MELLON CENTER OF COMPUTATIONAL THINKING, [s.d.]). Essa abordagem cria uma relação causal: problemas autênticos fornecem a motivação e o contexto para que os alunos se engajem profundamente, desenvolvam e apliquem as habilidades DAAD.\nO MIT, Massachusetts Institute of Technology, reconhece o Pensamento Computacional como um tipo distinto de raciocínio rigoroso de importante valor intelectual. Este raciocínio requer e desenvolve modos importantes de comunicação e a necessidade de compreender o impacto transformador da computação em outras disciplinas (DENNIN & TEDRE, 2019). O MIT recomenda um requisito mínimo de computação para todos os estudantes de graduação, enfatizando que o Pensamento Computacional é mais amplo do que a proficiência em programação (MASSACHUSETTS INSTITUTE OF TECHNOLOGY, 2017)(MASSACHUSETTS INSTITUTE OF TECHNOLOGY, [s.d.]). As disciplinas Introdução ao Pensamento Computacional em Python (6.100A, 12 Créditos) e Introdução ao Pensamento Computacional e Ciência de Dados (6.100B, 12 Créditos), que utilizam Python como linguagem de programação e visam dar aos alunos a confiança para escrever pequenos programas úteis, independentemente de sua área principal de estudos (MASSACHUSETTS INSTITUTE OF TECHNOLOGY, [s.d.]).\nA Penn State integra o Pensamento Computacional em seu currículo do curso de Ciência da Computação (PENN STATE UNIVERSITY, [s.d.]ab). As disciplinas enfatizam a conceituação e implementação de soluções computacionais, o raciocínio sobre problemas em múltiplos níveis de abstração e a análise de código quanto ao comportamento, eficiência e correção (PENN STATE UNIVERSITY, [s.d.]a). Também abordam habilidades de desenvolvimento e manutenção de programas, como depuração e teste. Já na University of Wisconsin-Madison a disciplina Resolução de Problemas Usando Computadores (COMP SCI 310, 3 créditos) introduz a abstração e decomposição de problemas, discute métodos de uso de computadores para resolver problemas, incluindo técnicas elementares de programação, linguagens de manipulação simbólica e pacotes de software. (THE UNIVERSITY OF WISCONSIN-MADISON, [s.d.]a). Finalmente, a University of Texas at Austin foca em conceitos fundamentais de Ciência da Computação, incluindo desenvolvimento de algoritmos, decomposição de problemas e técnicas de depuração em sua disciplina Programação Introdutória (créditos não disponíveis) (THE UNIVERSITY OF TEXAS AT AUSTIN, 2015).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Analisando Currículos Internacionais</span>"
    ]
  },
  {
    "objectID": "inte.html#universidades-no-reino-unido",
    "href": "inte.html#universidades-no-reino-unido",
    "title": "3  Analisando Currículos Internacionais",
    "section": "3.2 Universidades no Reino Unido",
    "text": "3.2 Universidades no Reino Unido\nNa Cambridge University a formação do Raciocínio Algorítmico parece ter sido atribuída ao Cambridge Mathematics. Um instituto criado pela união da editora e as faculdades de educação e matemática da Universidade de Cambridge. Nos documentos gerados pelo Cambridge Mathematics (CAMBRIDGE MATHS, [s.d.]) é possível observar uma relação profunda entre o Pensamento Computacional e o pensamento funcional. O instituto produz, cursos, seminários e material de aula para ajudar a formação destas competência em alunos de cursos de graduação diferentes. e integrados no currículo, com ênfase em abstração, lógica, algoritmos e representação de dados. Considerando especialmente as disciplinas introdutórias de cursos relacionados a computação teremos: a disciplina Algoritmos 1 (parte do curso geral), que inclui tópicos como ordenação, análise de complexidade, paradigmas de design (divisão e conquista, programação dinâmica, algoritmos gulosos), estruturas de dado, e análise formal da eficiência dos algoritmos(UNIVERSITY OF CAMBRIDGE, [s.d.]a); o desafio Computational Thinking Challenge, um projeto de pesquisa e avaliação digital da faculdade de edução, focado em avaliação de competências de **Pensamento Computacional* voltado para estudantes e educadores (UNIVERSITY OF CAMBRIDGE, [s.d.]b); e a disciplina Lógica e Algoritmos (parte do curso geral) que explora métodos formais, lógica proposicional e de predicados, e sua aplicação em algoritmos e verificação de sistemas computacionais(UNIVERSITY OF CAMBRIDGE, [s.d.]c).\nA Oxford University oferece cursos de Ciência da Computação, Matemática e Ciência da Computação, e Ciência da Computação e Filosofia. Esses programas, desde o início, estimulam o Pensamento Computacional por meio do design de programas de computador (UNIVERSITY OF OXFORD, [s.d.]a). O departamento enfatiza a leitura de materiais que ilustram conceitos de alto nível da ciência da computação, a motivação por trás deles e sua aplicação (UNIVERSITY OF OXFORD, [s.d.]a). Além disso, a Oxford University está envolvida com o “UK Bebras Challenge”, um desafio de Pensamento Computacional que visa introduzir o conceito aos alunos nos níveis de ensino anterior à graduação (UK BEBRAS, [s.d.]a)(UNIVERSITY OF OXFORD, [s.d.]d). Finalmente, o Oxford University Computing Challenge, em inglês desafio de computação da Universidade de Oxford, é um evento com participação por convite que encoraja os alunos a desenvolverem suas habilidades de Pensamento Computacional por meio do uso de algoritmos e programas para resolver problemas (UNIVERSITY OF OXFORD, [s.d.]b).\nO programa de graduação em computação do Imperial College London enfatiza princípios fundamentais, pensamento lógico e considerações de engenharia no design de sistemas (IMPERIAL COLLEGE LONDON, [s.d.]). Os alunos participam de aulas de laboratório e resolução de problemas, bem como de trabalhos de projeto e design. Os módulos centrais incluem as disciplinas: Matemática Discreta (7,5 ECTS); Matemática, Lógica e Raciocínio (7,5 ECTS); e Grafos e Algoritmos (7,5 ECTS), com módulos opcionais como Raciocínio Simbólico (6 ECTS) e Técnicas Computacionais (6 ECTS) (IMPERIAL COLLEGE LONDON, [s.d.]). Ainda que não tenha sido encontrada a expressão Pensamento Computacional explicitamente, os componentes da metodologia DAAD estão claramente integrados no currículo, com ênfase em abstração, lógica, algoritmos e representação de dados (IMPERIAL COLLEGE LONDON, [s.d.]).\nA Cardiff University oferece uma disciplina dedicada ao Pensamento Computacional (CM1101, 20 créditos UK) no primeiro ano de seu curso de Ciência da Computação, juntamente com a disciplina de Resolução de Problemas com Python (10 créditos UK) e outra de Programação Orientada a Objetos com Java (20 créditos UK) (CARDIFF UNIVERSITY, [s.d.]). Isso indica um foco precoce dedicado ao Pensamento Computacional, porém espalhado por diversas disciplinas do currículo do curso.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Analisando Currículos Internacionais</span>"
    ]
  },
  {
    "objectID": "inte.html#universidades-na-europa-continental",
    "href": "inte.html#universidades-na-europa-continental",
    "title": "3  Analisando Currículos Internacionais",
    "section": "3.3 Universidades na Europa Continental",
    "text": "3.3 Universidades na Europa Continental\nDesde 2014, muitos países europeus têm revisado seus currículos de educação obrigatória para introduzir conceitos básicos de Ciência da Computação, preparando o terreno para o desenvolvimento de habilidades de Pensamento Computacional (EUROPEAN COMMISSION, 2021). A Comissão Europeia, por meio do seu Plano de Ação para a Educação Digital 2021-2027, reforça a importância da educação em computação como uma prioridade para aprimorar as habilidades e competências digitais (EUROPEAN COMMISSION, 2021).\nA ETH Zurich (Suíça) enfatiza que o Pensamento Computacional vai além da programação e envolve as capacidades de abstração (ETH ZÜRICH, [s.d.]a). Para o ensino exclusivo de Pensamento Computacional a universidade adota um paradigma de sala de aula invertida, flipped classroom (BERGMANn, 2012), com vídeos e leituras para autoestudo, disponíveis online para seus alunos. O programa de Ciência da Computação também inclui, no primeiro ano, as disciplinas: Introdução a Programação (8 ECTS); Estruturas de Dados e Algoritmos (8 ECTS); e Projeto Digital e Arquitetura de Computador (6 ECTS) (ETH ZURICH, 2024). O modelo de sala de aula invertida da ETH Zurich (ETH ZÜRICH, [s.d.]a) demonstra uma estratégia pedagógica que desloca a instrução direta para fora da sala de aula para permitir mais tempo para a resolução interativa de problemas durante as aulas. A declaração explícita de que “o Pensamento Computacional é mais do que programar um computador, significa pensar em abstrações” (ETH ZÜRICH, 2020) indica um foco conceitual profundo. Sugerindo foco na aplicação de conteúdos normalmente integrados as disciplinas dos cursos de Ciência e Engenharia da Computação.\nNa Edinburgh University, o programa de Ciência da Computação foca na compreensão, design, implementação e uso de sistemas computacionais, com conceitos centrais derivados da matemática, lógica e engenharia (UNIVERSITY OF EDINBURGH, [s.d.]). As disciplinas do primeiro ano incluem Introdução a Computação (20 créditos UK), Programação de Computadores (20 créditos UK) e, principalmente, Como Resolver Problemas Usando Computadores (créditos não disponíveis) (UNIVERSITY OF EDINBURGH, [s.d.]). A universidade enfatiza o trabalho prático, incluindo a construção de sistemas computacionais e trabalho experimental (UNIVERSITY OF EDINBURGH, [s.d.]).\nA École hôtelière de Lausanne (EHL), renomada instituição suíça de ensino superior, integra um módulo específico de “Pensamento Computacional” (88 horas: 30 horas de contato + 58 horas de estudo independente) em seu programa de Bacharelado em Administração Hoteleira (EHL HOSPITALITY BUSINESS SCHOOL, 2024). Esta disciplina, oferecida no segundo semestre, representa \\(3.5\\) créditos ECTS e uma carga horária total de \\(88\\) horas, sendo \\(30\\) horas de contato direto com o professor e \\(58\\) horas destinadas ao estudo independente (EHL HOSPITALITY BUSINESS SCHOOL, 2024). A inclusão de Pensamento Computacional em um programa de Administração Hoteleira demonstra o reconhecimento crescente de que essas competências transcendem as áreas tradicionais de ciência da computação, aplicando-se a diversos campos profissionais (EHL HOSPITALITY BUSINESS SCHOOL, 2024). A oferta no segundo semestre indica seu papel como base fundamental para o desenvolvimento de habilidades de resolução estruturada de problemas, análise de dados e desenvolvimento de soluções inovadoras no setor hoteleiro. Esta abordagem da EHL alinha-se com as tendências globais de integração explícita do Pensamento Computacional nos currículos de graduação, independentemente da área de formação principal (WING, 2006).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Analisando Currículos Internacionais</span>"
    ]
  },
  {
    "objectID": "inte.html#universidades-na-china",
    "href": "inte.html#universidades-na-china",
    "title": "3  Analisando Currículos Internacionais",
    "section": "3.4 Universidades na China",
    "text": "3.4 Universidades na China\nAs universidades chinesas demonstram um compromisso significativo, porém diversificado, com o Pensamento Computacional, adotando modelos distintos de implementação:\nA Universidade de Shandong adota um centralizado, oferecendo a disciplina Introdução à Computação e Design de Programas (4,5 créditos) como disciplina obrigatória em seus cursos de Ciência e Tecnologia da Computação, Inteligência Artificial e Ciência de Dados (UNIVERSIDADE DE SHANDONG, 2020). Embora divulgado internacionalmente como a disciplina Pensamento Computacional e Programação (5 créditos) (UNIVERSIDADE DE SHANDONG, [s.d.]a), o currículo oficial visa “melhorar sistematicamente a capacidade de resolução de problemas dos alunos, a capacidade de sistemas de computador, o pensamento inovador e a capacidade de inovação” (UNIVERSIDADE DE SHANDONG, [s.d.]b), alinhando-se diretamente com os princípios do Pensamento Computacional através de uma abordagem robusta e intensiva de 88 horas totais (UNIVERSIDADE DE SHANDONG, 2020).\nA Universidade de Pequim (PKU), a PKU implementa um Modelo de Literacia Distribuída, onde o Pensamento Computacional é integrado em disciplinas aplicadas oferecidas por diversos departamentos. Um exemplo notável é a disciplina Fundamentos da Linguagem Python e Aplicações (3,5 créditos) oferecida pela Escola de Ciências da Terra e do Espaço, que declara explicitamente o objetivo de “guiar os alunos a construir ativamente um modelo de pensamento computacional” e “resolver problemas através de algoritmos de programa para aprofundar a sua compreensão da linguagem de programação” (UNIVERSIDADE DE PEQUIM, [s.d.]a). Adicionalmente, existe a disciplina Pensamento Computacional (3 créditos) (UNIVERSIDADE DE PEQUIM, [s.d.]b), confirmando uma estratégia de promover o Pensamento Computacional como competência transdisciplinar.\nA Universidade de Tsinghua representa o modelo interdisciplinar integrado considerando o Pensamento Computacional uma competência intrínseca integrada ao currículo principal (UNIVERSIDADE DE TSINGHUA, 2022). A universidade é pioneira na criação de programas híbridos como Engenharia Química e Inteligência Artificial no Tanwei College, onde o Pensamento Computacional está incorporado na própria identidade do programa, visando formar engenheiros químicos que sejam capazes de “desconstruir a lógica algorítmica e aplicá-la para resolver problemas químicos” (UNIVERSIDADE DE TSINGHUA, 2025). Globalmente, Tsinghua oferece a “Especialização em Estruturas de Dados e Algoritmos” na plataforma Coursera (COURSERA, 2024), listando explicitamente “Pensamento Computacional” como competência-chave (UNIVERSIDADE DE TSINGHUA, [s.d.]).\nEsta análise revela três modelos distintos de implementação estratégica: o modelo centralizado e pragmático de Shandong garante conformidade eficiente com diretrizes nacionais; o modelo distribuído de Pequim promove a criação de alunos com capacidade de Pensamento Computacional em toda a universidade; e o modelo integrado de Tsinghua representa a vanguarda na fusão fundamental entre disciplinas. A diversidade destes modelos parece indicar um ecossistema educacional dinâmico onde as universidades exercem autonomia significativa para inovar pedagogicamente dentro do quadro de políticas nacionais chinesas para educação em Inteligência Artificial e competências digitais (CHINA, 2017), revelando não um sistema monolítico, mas um ambiente de experimentação e competição entre as principais instituições do país.\nA Table 3.4 oferece uma visão estruturada e comparativa de como universidades líderes em diferentes regiões abordam a educação em Pensamento Computacional, com foco nos elementos DAAD. Esta análise permite identificar padrões comuns e pontos fortes únicos, fornecendo informações valiosas para o design de um currículo de 80 horas, ao apresentar diversos modelos de integração e ênfase pedagógica.\n\n\n\nTable 3.4: Exemplos de Universidades e a Integração de Pensamento Computacional/DAAD em seus Currículos de Graduação.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUniversidade\nPaís/Região\nTipo de Curso/Integração\nDisciplinas Principais\nCréditos/Carga Horária\nElementos DAAD/PC Enfatizados\nLinguagens/Ferramentas\nDestaques Pedagógicos\n\n\n\n\nCarnegie Mellon University\nEUA\nCentro dedicado de PC, Currículo específico\nPrincípios da Computação; Estrutura de Dados e Algoritmos; Codificação e PC com VEX V5\n10 créditos; 12 créditos; curso de extensão\nDecomposição, Abstração, Algoritmização, Depuração\nVEX V5 Robotics\nPROBEs (explorações orientadas a problemas), aplicação em contextos do mundo real\n\n\nMIT\nEUA\nRequisito mínimo para todos os estudantes\nIntrodução ao PC em Python (6.100A); PC e Ciência de Dados (6.100B)\n12 créditos cada\nRaciocínio rigoroso, comunicação, impacto transformador\nPython\nDesenvolvimento de confiança para programas úteis independente da área de estudo\n\n\nPenn State University\nEUA\nIntegrado no currículo de Ciência da Computação\nDisciplinas do curso de CS\nNão especificado\nConceituação e implementação, abstração em múltiplos níveis, análise de código\nNão especificado\nÊnfase em comportamento, eficiência e correção do código\n\n\nUniversity of Wisconsin-Madison\nEUA\nDisciplina específica\nResolução de Problemas Usando Computadores (COMP SCI 310)\n3 créditos\nAbstração, decomposição de problemas\nLinguagens de manipulação simbólica, pacotes de software\nMétodos computacionais para resolução de problemas\n\n\nUniversity of Texas at Austin\nEUA\nDisciplina introdutória\nProgramação Introdutória\nNão disponível\nDesenvolvimento de algoritmos, decomposição, depuração\nNão especificado\nConceitos fundamentais de Ciência da Computação\n\n\nCambridge University\nReino Unido\nInstituto Cambridge Mathematics, currículo integrado\nAlgoritmos 1; Lógica e Algoritmos; Computational Thinking Challenge\nCurso geral\nAbstração, lógica, algoritmos, representação de dados\nNão especificado\nRelação profunda entre PC e pensamento funcional, projeto de pesquisa e avaliação digital\n\n\nOxford University\nReino Unido\nIntegrado em múltiplos cursos\nCursos de CS, Matemática e CS, CS e Filosofia\nNão especificado\nDesign de programas, conceitos de alto nível\nNão especificado\nUK Bebras Challenge, Oxford University Computing Challenge, ênfase em leitura de materiais conceituais\n\n\nImperial College London\nReino Unido\nPrograma de graduação em computação\nMatemática Discreta; Matemática, Lógica e Raciocínio; Grafos e Algoritmos\n7,5 ECTS cada (centrais); 6 ECTS (opcionais)\nPrincípios fundamentais, pensamento lógico, algoritmos\nNão especificado\nLaboratórios, resolução de problemas, projetos de design\n\n\nCardiff University\nReino Unido\nDisciplina dedicada no 1º ano\nPensamento Computacional (CM1101); Resolução de Problemas com Python; POO com Java\n20 créditos UK; 10 créditos UK; 20 créditos UK\nPC dedicado, resolução de problemas\nPython, Java\nFoco precoce distribuído por diversas disciplinas\n\n\nETH Zurich\nSuíça\nParadigma de sala de aula invertida\nIntrodução a Programação; Estruturas de Dados e Algoritmos; Projeto Digital\n8 ECTS; 8 ECTS; 6 ECTS\nAbstração (“PC é mais que programar”)\nNão especificado\nFlipped classroom, vídeos e leituras online, autoestudo\n\n\nEdinburgh University\nEscócia\nPrograma de Ciência da Computação\nIntrodução a Computação; Programação de Computadores; Como Resolver Problemas\n20 créditos UK cada\nCompreensão, design, implementação de sistemas\nNão especificado\nTrabalho prático, construção de sistemas, trabalho experimental\n\n\nÉcole Hôtelière de Lausanne (EHL)\nSuíça\nMódulo específico em Administração Hoteleira\nPensamento Computacional\n3,5 ECTS (88h: 30h contato + 58h estudo)\nBase para resolução estruturada, análise de dados\nNão especificado\nAplicação transdisciplinar, integração em área não-tecnológica\n\n\nUniversidade de Shandong\nChina\nModelo centralizado, disciplina obrigatória\nIntrodução à Computação e Design de Programas / PC e Programação\n4,5 créditos / 5 créditos (88h totais)\nResolução de problemas, capacidade de sistemas, inovação\nNão especificado\nFoco em conformidade com diretrizes nacionais, abordagem robusta\n\n\nUniversidade de Pequim (PKU)\nChina\nModelo de Literacia Distribuída\nFundamentos Python e Aplicações; Pensamento Computacional\n3,5 créditos; 3 créditos\nConstrução ativa de modelo de PC, algoritmos\nPython\nIntegração em disciplinas aplicadas por diversos departamentos\n\n\nUniversidade de Tsinghua\nChina\nModelo interdisciplinar integrado\nEngenharia Química e IA; Especialização em Estruturas de Dados\nProgramas híbridos\nDesconstrução lógica algorítmica, aplicação interdisciplinar\nNão especificado\nProgramas híbridos inovadores, competência intrínseca integrada, ofertas globais (Coursera)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Analisando Currículos Internacionais</span>"
    ]
  },
  {
    "objectID": "def.html",
    "href": "def.html",
    "title": "4  Definição e Princípios da Metodologia DAAD",
    "section": "",
    "text": "4.1 🔍 Metodologias Semelhantes ao DAAD\nA abordagem dos Quatro Pilares do Pensamento Computacional, desenvolvida pela University of York, estrutura-se em decomposição, reconhecimento de padrões, abstração e pensamento algorítmico. Essa metodologia enfatiza a fragmentação de problemas complexos e a identificação de regularidades, mas não formaliza etapas de validação pós-implementação, limitando-se à concepção teórica de soluções (UNIVERSITY OF YORK, 2020) (SENTANCE, S. et al, 2017). Já a Abordagem por Atividades Desplugadas, proposta por Brackmann (2017), prioriza intervenções pedagógicas sem uso de tecnologia, utilizando recursos físicos, como quebra-cabeças, para desenvolver abstração e decomposição. Embora eficaz em contextos com infraestrutura limitada, sua aplicação tende a focar em modelagem de hardware em detrimento do design sistemático de algoritmos, além de carecer de sequencialidade didática clara (BRACKMANN, 2017, p. 42-45) (BRACKMANN, 2017)(SENTANCE, S. et al, 2017).\nO framework de Wing (2006), base teórica seminal, define pilares como decomposição, abstração, design algorítmico e generalização. Wing enfatiza que a generalização de soluções permite aplicação em múltiplos contextos, porém não integra explicitamente mecanismos de depuração (debugging) ou validação iterativa, concentrando-se na fase de concepção em vez do refinamento prático (WING, 2006, p. 34) (SENTANCE, S. et al, 2017)(KURKOVSKY, 2013). Essas lacunas são supridas pelo DAAD, que incorpora o Debugging como etapa crítica para testar robustez, eficiência e escalabilidade de algoritmos em cenários reais – como em sistemas embarcados ou otimização NP-difícil –, consolidando um ciclo completo de desenvolvimento (KURKOVSKY, 2013; SENTANCE et al., 2017) (SENTANCE, S. et al, 2017). A Table 4.1 resume estas metodologias.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Definição e Princípios da Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "def.html#metodologias-semelhantes-ao-daad",
    "href": "def.html#metodologias-semelhantes-ao-daad",
    "title": "4  Definição e Princípios da Metodologia DAAD",
    "section": "",
    "text": "Table 4.1: Propostas metodológicas de aplicação pedagógica dos conceitos de Pensamento Computacional\n\n\n\n\n\n\n\n\n\n\n\nMetodologia\nInstituição/Referência\nComponentes-Chave\nDiferenças para o DAAD\n\n\n\n\nQuatro Pilares do PC\nUniversity of York\n1. Decomposição2. Reconhecimento de padrões3. Abstração4. Pensamento algorítmico\n• Substitui Debugging por Reconhecimento de padrões• Não inclui refinamento iterativo após implementação\n\n\nAbordagem por Atividades Desplugadas\nBrackmann (2017)\n• Problemas físicos (ex.: quebra-cabeças)• Modelagem conceitual sem código• Ênfase em abstração\n• Foco em hardware vs. solução algorítmica• Menos estruturada em etapas sequenciais\n\n\nframework de Wing (2006)\nWing (2006)\n• Decomposição• Abstração• Design algorítmico• Generalização\n• Não formaliza Debugging como pilar independente• Generalização ≠ Validação prática iterativa",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Definição e Princípios da Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "def.html#inovações-do-daad",
    "href": "def.html#inovações-do-daad",
    "title": "4  Definição e Princípios da Metodologia DAAD",
    "section": "4.2 Inovações do DAAD",
    "text": "4.2 Inovações do DAAD\nA diferença sine qua non do DAAD em relação aos outros modelos é a integração explícita de Debugging*. Uma fase de aprendizado dedicada a depuração, que não apenas identifica erros, mas também valida soluções em contextos reais. Essa abordagem corrige a lacuna de modelos que ignoram o refinamento pós-implementação, promovendo uma compreensão mais profunda e prática do desenvolvimento de algoritmos. O Debugging adiciona um pilar dedicado à validação iterativa, ausente nos framework_s tradicionais corrigindo a lacuna de modelos que ignoram o refinamento pós-implementação das soluções encontradas. Na Abordagem de York (2020), o reconhecimento de padrões é estático, identificação de similaridades, enquanto no DAAD a abstração é dinâmica, preparação para depuração. O modelo original de Wing (2006) trata generalização como resultado, enquanto no DAAD o Debugging torna-a processual através de iteração. Finalmente, a Abordagem -unplugged de Brackmann (2017) enfatiza modelagem física, mantém abstração como conceito teórico, já no DAAD vincula-se à rastreabilidade durante validação, enquanto o DAAD prioriza soluções algorítmicas e validação prática.\nA estrutura do DAAD também inclui uma . Sequência pedagógica otimizada em uma ordenação lógica: Problema → Abstração → Algoritmo → Validação. O que contrasta com os modelos fragmentados (ex.: York, Wing) que não articulam nenhuma ordem de transição entre etapas.\nAlém disso, como o foco é em engenharia de software aplicada a Ciência e Engenharia da Computação, o DAAD enfatiza a criação de algoritmos robustos e eficientes, alinhando-se às demandas do mercado de trabalho. Isso inclui, a aplicação de técnicas avançadas de depuração, como testes de estresse e análise de edge cases, casos limites, que vão além da simples correção de erros sintáticos. Suportando processos de depuração sistemática alinhados as demandas industriais.\nA relação entre as fases do DAAD e a solução de problemas pode ser vista por meio da análise de problemas símples típicos das disciplinas introdutórias dos cursos de Ciência e Engenharia da Computação:\n\nGerenciamento de Tarefas Acadêmicas: usando o trabalho de Kerzner (2017) como base para gestão de projetos acadêmicos, teremos:\n\n\nProblem Decomposition: dividir planejamento semestral em: disciplinas, tarefas semanais, prazos de entrega.\nAbstraction: definir modelo mínimo (prioridade, tempo estimado, prazo) ignorando detalhes não-essenciais.\n\nAlgorithm Design: criar algoritmo de priorização baseado em: (dias_restantes / complexidade) * peso_nota.\n\nDebugging: simular sobrecarga (ex.: 3 trabalhos no mesmo dia) e validar ajustes automáticos\n\n\nOrganização de Coleções Digitais: usando como base o trabalho de Rowley (2007) sobre organização de informações digitais, teremos:\n\n\nProblem Decomposition: fragmentar catálogo de mídias (músicas/livros) por: gênero, autor, ano.\n\nAbstraction: representar itens apenas com metadados essenciais (título, autor, ano).\n\nAlgorithm Design: desenvolver sistema de busca por similaridade (ex.: “encontrar livros como X”).\n\nDebugging: testar com entradas ambíguas (ex.: títulos parecidos, autores homônimos).\n\n\nOtimização de Rotas no Campus: usando o trabalho de Even (2011) sobre algoritmos de grafos aplicados a problemas cotidianos, teremos:\n\n\nProblem Decomposition: dividir mapa do campus em setores e conexões entre prédios.\n\nAbstraction: modelar caminhos como grafos simples (nós = prédios, arestas = caminhos).\n\nAlgorithm Design: implementar algoritmo para menor caminho considerando: distância, escadas, acesso para deficientes.\n\nDebugging: validar com rotas bloqueadas (ex.: obras) e pontos de interesse\n\n\nOtimização de Busca em Conjuntos de Dados: adaptação de princípios de divisão e conquista para problemas de busca (SEDGEWICK, 2011).\n\n\nProblem Decomposition: dividir grandes conjuntos de dados (ex.: 10.000 registros) em subconjuntos menores por faixas de valores (ex.: intervalos numéricos ou categorias alfabéticas).\n\nAbstraction: modelar registros apenas com atributos essenciais para busca (ex.: ID numérico, chave primária), ignorando metadados irrelevantes.\nAlgorithm Design: projetar uma estratégia híbrida de busca binária em subconjuntos ordenados com busca sequencial em partições pequenas.\n\nDebugging: validar eficiência com conjuntos desbalanceados (ex.: 90% dos registros concentrados em 10% das partições) usando perfis de desempenho.\n\nA metodologia DAAD foi concebida ir além das disciplinas introdutórias e além dos cursos de Ciência e Engenharia da Computação. O objetivo é que o DAAD ajude a criar a capacidade de resolver problemas complexos de forma sistemática, promovendo uma compreensão profunda dos processos envolvidos na criação de soluções em qualquer área do conhecimento. Entretanto, como a prova de conceito aqui proposta diz respeito aos cursos de Ciência e Engenharia da Computação, a seguir são apresentados exemplos de aplicação do DAAD em contextos mais avançados, que demonstram sua versatilidade e aplicabilidade em problemas complexos e multidisciplinares.\n\nOtimização Algorítmica para Problemas NP-Difíceis: usando um modelo de decomposição baseado em Cook (2011) para problemas NP-completos, com métricas de validação de Dolan-Moré (2002).\n\n\nProblem Decomposition: fragmentação de problemas de otimização combinatorial (ex.: Traveling Salesman Problem) em subproblemas de roteamento local e conexões inter-regionais, permitindo abordagens divide-et-conquer, dividir e conquistar.\n\nAlgorithm Design: implementação de meta-heurísticas (ex.: Simulated Annealing com resfriamento adaptativo) para busca de soluções ε-ótimas em espaços de estado complexos.\n\nDebugging: validação via gap analysis entre soluções heurísticas e limites teóricos (ex.: comparação com Held-Karp bound), utilizando perfis de desempenho (performance profiles) para avaliação estatística .\n\n\nEngenharia de Sistemas Embarcados Críticos: usando ramework de abstração conforme definido por Wilhelm (2008) para sistemas tempo-real, com validação por Henzinger (2007), teremos:\n\n\nAbstraction: modelagem de invariantes temporais e de consumo energético através de Worst-Case Execution Time, WCET, e power-state machines, filtrando variáveis não essenciais ao cumprimento de restrições rígidas de tempo real.\n\nAlgorithm Design: síntese de algoritmos com garantias formais (ex.: controle PID com provas de estabilidade Lyapunov) atendendo a requisitos de segurança ISO 26262 ASIL-D.\n\nDebugging: verificação Hardware-In-the-Loop, HIL, com injeção de falhas sistêmicas e análise de violações de deadlines* via tracing em tempo real.\n\n\nDesenvolvimento de Pipeline de Aprendizado de Máquina: usando com referência o trabalho de GÉRON (2019), que descreve a construção de sistemas de aprendizado de máquina como um processo iterativo e sistemático, teremos:\n\n\nProblem Decomposition: fragmentação do fluxo de trabalho em coleta de dados, pré-processamento, seleção de modelo, treinamento e avaliação.\n\nAbstraction: identificação de características essenciais nos dados (ex.: seleção de features via PCA ou análise de importância) .\n\nAlgorithm Design: projeto de arquitetura de redes neurais ou ajuste de hiperparâmetros de algoritmos de classificação.\n\nDebugging: validação cruzada, análise de overfitting e ajuste de modelos com base em métricas de precisão/recall.\n\n\nDesenvolvimento de Sistemas Concorrentes: usando como referência o trabalho de HERLIHY (2015), que aborda a construção de sistemas concorrentes e distribuídos, teremos:\n\n\nProblem Decomposition: divisão do sistema em tarefas concorrentes (ex.: threads para E/S, processamento e comunicação).\n\nAbstraction: isolamento de seções críticas e recursos compartilhados (ex.: buffer de mensagens).\n\nAlgorithm Design: criação de protocolos de sincronização (ex.: semáforos, mutexes) e algoritmos de exclusão mútua.\n\nDebugging: teste de estresse para detecção de deadlocks e race conditions com ferramentas como Valgrind ou TSan .\n\n\nDesenvolvimento de Sistemas Distribuídos: este caso requer a aplicação dos princípios de decomposição hierárquica e depuração em falhas não determinísticas, seguindo o modelo de Tanenbaum (2015) para sistemas distribuídos .\n\n\nProblem Decomposition: divisão de sistemas complexos em microsserviços independentes (ex.: separação de módulos de autenticação, processamento de pagamentos e gerenciamento de dados) para tratamento paralelo.\nAlgorithm Design: implementação de protocolos de consenso como Raft ou Paxos para garantir consistência entre nós distribuídos (ONGARO, 2014).\n\nDebugging: simulação de falhas em cascata e testes de partição de rede com ferramentas como Chaos Monkey (NETFLIX,2025) para validar resiliência .\n\n\nCiência de Dados em Bioinformática: adaptação do framework Bioconductor para validação iterativa em análise genômica, conforme Huber (2015)\n\n\nAbstraction: identificação de variáveis genéticas essenciais em sequências de DNA (ex.: polimorfismos de nucleotídeo único - SNPs) ignorando “ruído” biológico.\nAlgorithm Design: Criação de pipelines de alinhamento usando técnicas de seleção adaptativa (ex.: integração BLAST/MinKNOW para enriquecimento de espécies raras) (PAYNE, 2022)(LOMAN, 2015).\n\nDebugging: validação estatística de falsos positivos/negativos através de reamostragem bootstrap e métricas de precisão.\n\n\n4.2.1 ✅ Validação do DAAD com Base em Evidências\nEstudos mostram que metodologias com 4+ etapas estruturadas aumentam em 40% a retenção de conceitos de PC entre estudantes de computação . O Debugging, quando integrado desde o projeto inicial, reduz erros de implementação em 62% comparado a abordagens reativas .",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Definição e Princípios da Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "def.html#decomposição-quebrando-a-complexidade",
    "href": "def.html#decomposição-quebrando-a-complexidade",
    "title": "4  Definição e Princípios da Metodologia DAAD",
    "section": "4.3 Decomposição: Quebrando a Complexidade",
    "text": "4.3 Decomposição: Quebrando a Complexidade\nA Decomposição é o processo analítico pelo qual problemas ou conceitos complexos são divididos em partes menores e mais gerenciáveis (EDTECHBOOKS, [s.d.]). Essa abordagem é necessária para a resolução eficaz de problemas, pois transforma situações que inicialmente parecem esmagadoras em elementos mais simples e acessíveis (KIM; LEE, 2018 apud KIM, 2021). Ao dividir um problema grande em subproblemas, torna-se mais fácil analisar cada componente isoladamente e, posteriormente, integrar as soluções para resolver o problema original (VOOGT et al., 2015 apud KIM, 2021).\nNo contexto da engenharia, a decomposição é empregada para desmembrar tarefas complexas, como a simulação de construção, em segmentos menores e mais fáceis de gerenciar (EDTECHBOOKS, [s.d.]). Na ciência da computação, a decomposição visa quebrar um problema ou sistema complexo em partes que são mais fáceis de conceber, entender, programar e manter (Guzdial, 2015 apud KIM, 2021). Exemplos clássicos incluem a divisão da tarefa de fazer um bolo em etapas menores, como preparar a massa, assar o bolo, fazer a cobertura e aplicá-la (BARES et al., 2019 apud KIM, 2021).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Definição e Princípios da Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "def.html#abstração-focando-no-essencial",
    "href": "def.html#abstração-focando-no-essencial",
    "title": "4  Definição e Princípios da Metodologia DAAD",
    "section": "4.4 Abstração: Focando no Essencial",
    "text": "4.4 Abstração: Focando no Essencial\nA Abstração é uma técnica central do Pensamento Computacional que se concentra em identificar informações importantes e relevantes, enquanto ignora detalhes desnecessários ou irrelevantes, facilitando uma compreensão mais clara das questões essenciais (EDTECHBOOKS, [s.d.]) referentes ao problema que precisa ser resolvido. A abstração é o processo de generalizar detalhes concretos para direcionar a atenção para aspectos de maior importância (KIM; LEE, 2018 apud KIM, 2021).\nA abstração é considerada o processo de pensamento de mais alto nível no Pensamento Computacional, conferindo a capacidade de escalar e gerenciar a complexidade (CAMBRIDGE, [s.d.]). A sua presença é tão difundida na ciência da computação que a sua descrição concisa é um desafio, e embora haja um consenso sobre a sua centralidade, as definições exatas podem variar entre os investigadores (PERKINS, 2012 apud KIM, 2021). Exemplos ilustrativos de abstração incluem o uso de mapas, que simplificam o mundo real ao omitir detalhes desnecessários, ou a forma como os sistemas computacionais ocultam as suas complexidades internas do utilizador em interfaces gráficas, apresentando apenas a informação relevante para a interação (unplugged, [s.d.]).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Definição e Princípios da Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "def.html#algoritmização-desenvolvendo-soluções-sistemáticas",
    "href": "def.html#algoritmização-desenvolvendo-soluções-sistemáticas",
    "title": "4  Definição e Princípios da Metodologia DAAD",
    "section": "4.5 Algoritmização: Desenvolvendo Soluções Sistemáticas",
    "text": "4.5 Algoritmização: Desenvolvendo Soluções Sistemáticas\nA Algoritmização, ou Design de Algoritmos, envolve a criação de instruções passo a passo ou procedimentos para resolver um problema (EDTECHBOOKS, [s.d.]). Um algoritmo é definido como uma sequência finita de instruções matematicamente rigorosas, tipicamente utilizadas para resolver uma classe específica de problemas ou para realizar uma computação (KIM; LEE, 2018 apud KIM, 2021).\nO pensamento algorítmico baseia-se na premissa de que as soluções para os problemas não se limitam a respostas pontuais, mas sim a algoritmos que podem fornecer respostas sempre que necessário para casos gerais (CAMBRIDGE, [s.d.]). É o processo de construir um esquema de passos ordenados que podem ser seguidos para fornecer soluções para todos os problemas constituintes necessários para resolver o problema original (unplugged, [s.d.]). A capacidade de expressar uma solução na forma de um algoritmo demonstra uma compreensão mais profunda do problema (CAMBRIDGE, [s.d.]). A eficiência, em termos de velocidade ou uso de memória, é uma consideração importante na criação de algoritmos (CAMBRIDGE, [s.d.]) sempre que o objetivo final for transformar o algoritmo em uma solução computacional. Os algoritmos podem ser expressos de várias formas, incluindo linguagem natural, pseudocódigo, fluxogramas e diagramas (KIM; LEE, 2018 apud KIM, 2021).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Definição e Princípios da Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "def.html#depuração-identificando-e-corrigindo-erros",
    "href": "def.html#depuração-identificando-e-corrigindo-erros",
    "title": "4  Definição e Princípios da Metodologia DAAD",
    "section": "4.6 Depuração: Identificando e Corrigindo Erros",
    "text": "4.6 Depuração: Identificando e Corrigindo Erros\nO Depuração, ou debugging é o processo de encontrar e corrigir erros, ou bugs, no código-fonte de qualquer software, algoritmo ou sistema (EDTECHBOOKS, [s.d.]). É uma etapa indispensável para garantir que uma solução encontrada funcione conforme o esperado (unplugged, [s.d.]).\nO processo de depuração envolve a identificação do erro, a análise de sua causa, registrando as mudanças de estado do programa e os valores dos dados, a correção do problema e a validação da correção por meio de testes (LI; CHENG, 2019 apud KIM, 2021). É uma atividade iterativa que contribui para a construção do conhecimento e o aprendizado de estratégias de resolução de problemas (unplugged, [s.d.]). A depuração permite que os programadores localizem e resolvam bugs, melhorando a qualidade do software e a experiência do usuário final (LI; CHENG, 2019 apud KIM, 2021).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Definição e Princípios da Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "def.html#o-papel-da-daad-na-educação-em-ciência-e-engenharia-da-computação",
    "href": "def.html#o-papel-da-daad-na-educação-em-ciência-e-engenharia-da-computação",
    "title": "4  Definição e Princípios da Metodologia DAAD",
    "section": "4.7 O Papel da DAAD na Educação em Ciência e Engenharia da Computação",
    "text": "4.7 O Papel da DAAD na Educação em Ciência e Engenharia da Computação\nO Pensamento Computacional, incluindo os elementos da metodologia DAAD, é considerado uma habilidade básica e estruturante para o desenvolvimento científico, tecnológico e econômico no século XXI (Review on the teaching…, [s.d.]). Sua relevância se estende além das fronteiras da ciência da computação, sendo essencial para a resolução de problemas em diversas áreas STEM (Ciência, Tecnologia, Engenharia e Matemática) e No-STEM (Review on the teaching…, [s.d.]). Profissionais da computação, por sua própria natureza, utilizam intrinsecamente essas habilidades: pensar abstratamente, operar em múltiplos níveis de abstração, abstrair ideias para gerenciar a complexidade, e empregar a iteração, a depuração e o teste de software como práticas rotineiras (Review on the teaching…, [s.d.]).\nO aprendizado de técnicas que permitam o desenvolvimento de um Pensamento Computacional atua como um grampo P suportando o aluno na escalada para o desenvolvimento das habilidades necessárias a solução de problemas com o uso de máquinas. Além disso, estas habilidades são altamente transferíveis para outras áreas do conhecimento (Review on the teaching…, [s.d.]). Isso significa que as competências desenvolvidas não se restringem aos estudiosos da ciência da computação, mas possuem o potencial de irradiar para todo o campo da ciência e tecnologia.\nObserva-se que o Pensamento Computacional é consistentemente descrito como uma “habilidade fundamental” (Review on the teaching…, [s.d.]), uma “abordagem generalizada para a resolução de problemas” (Review on the teaching…, [s.d.]) e até mesmo um “novo paradigma que expande as habilidades cognitivas dos alunos” (Computational Thinking Exercises, [s.d.]). Essa caracterização parece ir além do simples ensino de um conjunto de ferramentas ou técnicas. Se o Pensamento Computacional é um “novo paradigma”, isso implica uma transformação na forma como os alunos abordam qualquer problema, não apenas aqueles relacionados à codificação. O objetivo final não é apenas formar programadores proficientes, mas cultivar uma “mentalidade computacional” (A Pedagogical framework…, [s.d.]) que capacite os indivíduos a “pensar de forma analítica e crítica” (Benefits and Challenges…, 2021). Para que essa transformação cognitiva ocorra, o currículo não deve se limitar à sintaxe de programação, mas deve focar no desenvolvimento dos processos cognitivos subjacentes e complementares. Nesse contexto, as atividades unplugged, aquelas que não envolvem computadores, tornam-se particularmente valiosas (Computational Thinking School…, [s.d.]). Elas permitem que os alunos compreendam os aspectos conceituais da metodologia DAAD sem a carga cognitiva imediata da programação e do ambiente computacional, estabelecendo uma base sólida para futuras atividades e permitindo a transferência destas habilidades para as atividades plugged, atividades realizadas com máquinas, mais complexas.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Definição e Princípios da Metodologia DAAD</span>"
    ]
  },
  {
    "objectID": "estra.html",
    "href": "estra.html",
    "title": "5  Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD",
    "section": "",
    "text": "5.1 Abordagens Pedagógicas Eficazes\nA Metodologia Flipped Classroom, aplicada pela ETH Zurich, é uma estratégia pedagógica que inverte a dinâmica tradicional de ensino. Flipped Classroom, é a expressão em inglês para sala de aula invertida e representa uma abordagem pedagógica que reverte a sequência do processo de ensino-aprendizagem. Tradicionalmente, a introdução a novos conceitos ocorre em sala de aula, seguida por atividades de reforço em casa. Nesta metodologia, o estudo inicial do conteúdo é realizado pelos alunos fora do ambiente de aula, por meio de materiais previamente fornecidos. Esse preparo prévio permite que o tempo em sala de aula seja otimizado para a prática, discussão e resolução de problemas, com o professor atuando como um orientador. A Metodologia Flipped Classroom pretende a promoção da autonomia do aluno, visto que o ritmo de assimilação do conteúdo inicial é adaptado às suas necessidades individuais. O foco das interações presenciais se desloca para a aplicação prática do conhecimento, o que pode fortalecer a compreensão e a retenção. O modelo permite que o professor ofereça um suporte mais direcionado, identificando e abordando dificuldades específicas dos alunos durante as atividades em grupo ou individuais (BERGAMI,2012).\nA Aprendizagem Baseada em Projetos (PBL) é uma estratégia amplamente utilizada e eficaz para o ensino de Pensamento Computacional (KALELKAR et al., 2019 apud KIM, 2021). A PBL envolve os alunos na resolução de problemas complexos e autênticos do mundo real, permitindo-lhes construir conhecimento significativo por meio da investigação, cooperação e prática (MAO; CAO; HE, 2018 apud KIM, 2021). Essa abordagem fomenta a autonomia do aluno, a criatividade e a capacidade de resolver problemas (MAO; CAO; HE, 2018 apud KIM, 2021). Exemplos incluem a criação de modelos computacionais sobre furacões usando Scratch (SCRATCH FOUNDATION, [s.d.]) ou o design de aplicativos para necessidades sociais (PERKINS, 2012 apud KIM, 2021).\nAs atividades unplugged ensinam o Pensamento Computacional sem o uso de dispositivos digitais, utilizando materiais como papel, cartas ou atividades físicas (KIM; LEE, 2018 apud KIM, 2021). Estas atividades permitem que os alunos se concentrem nos conceitos subjacentes do Pensamento Computacional sem se prenderem à sintaxe de uma linguagem de programação (RODRIGO; CABRERA; BARRERA, 2018 apud KIM, 2021). Exemplos incluem “programar” um colega para realizar uma tarefa simples, usar mapas para ilustrar a abstração (BARES et al., 2019 apud KIM, 2021) e a criação de fluxogramas da resolução do problema. O uso de atividades unplugged antes da programação baseada em computador pode levar a melhores resultados de aprendizagem (RODRIGO; CABRERA; BARRERA, 2018 apud KIM, 2021).\nA Aprendizagem Ativa e Colaborativa é altamente incentivada (WANG; XING, 2016 apud KIM, 2021). Discussões em equipe, resolução de problemas em grupo e a comunicação de soluções alternativas são práticas que fomentam o Pensamento Computacional (EDTECHBOOKS, [s.d.]). A aprendizagem colaborativa, facilitada por tecnologias simples, pode melhorar as habilidades de resolução de problemas e o engajamento dos alunos (XU et al., 2020 apud KIM, 2021).\nA Abordagem Heurística e Baseada em Problemas envolve apresentar problemas desafiadores e guiar os alunos a explorar e inovar, escalando gradualmente a complexidade, o que é indispensável para aprofundar a compreensão do Pensamento Computacional (KALELKAR et al., 2019 apud KIM, 2021). A abordagem socrática, na qual os conceitos são desenvolvidos por meio de questionamento dos alunos, também se mostra eficaz (WANG; XING, 2016 apud KIM, 2021).\nNo contexto dessas abordagens, o papel do professor se transforma de um mero transmissor de conhecimento para um facilitador,diagnosticador e curador do conhecimento. O educador deve atuar como gerador de questionamento, não fornecendo todas as soluções, mas guiando os alunos para que resolvam os problemas por si mesmos (MAO; CAO; HE, 2018 apud KIM, 2021). A capacidade do professor de diagnosticar dificuldades e oferecer orientação direcionada é determinante para o sucesso do processo de aprendizagem (MAO; CAO; HE, 2018 apud KIM, 2021). Isso parece indicar a necessidade de formação e desenvolvimento profissional contínuos para os educadores, capacitando-os não apenas no conhecimento do Pensamento Computacional, mas também nas estratégias pedagógicas para a sua implementação eficaz, incluindo a criação de ambientes de aprendizagem ativos e a oferta de retorno avaliativo construtivo.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD</span>"
    ]
  },
  {
    "objectID": "estra.html#materiais-didáticos-e-ferramentas",
    "href": "estra.html#materiais-didáticos-e-ferramentas",
    "title": "5  Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD",
    "section": "5.2 Materiais Didáticos e Ferramentas",
    "text": "5.2 Materiais Didáticos e Ferramentas\nLinguagens de Programação: Python é frequentemente citada como uma linguagem de programação ideal para o ensino de Pensamento Computacional, especialmente em disciplinas introdutórias, devido à sua estrutura direta e facilidade de uso (UNIVERSITY OF PENNSYLVANIA, [s.d.]). Outras linguagens como OCaml, Java, C, C++ e Prolog também são utilizadas em currículos mais avançados (University of Cambridge, [s.d.]).\nAmbientes de Desenvolvimento e Ferramentas Visuais: Ambientes como Scratch1 (para crianças e iniciantes) (KIM; LEE, 2018 apud KIM, 2021), XLogo4Schools2 e TigerJython, para Logo e Python, [^13] (MARCHAL; MOFFAT; VAN DER VEER, 2012 apud KIM, 2021) são empregados para reduzir a carga cognitiva e permitir que o foco recaia nos conceitos, notadamente para crianças e adolescentes. Além disso, ferramentas de depuração são essenciais para o aprendizado (Guzdial, 2015 apud KIM, 2021).\n[^13]disponível em: TigerJython.\nExemplos de Exercícios e Projetos encontrados na literatura:\n-Decomposição: quebrar a tarefa de fazer um sanduíche de geleia em etapas menores (EDTECHBOOKS, [s.d.]). - Abstração: criar um mapa de rotas de fuga da escola (EDTECHBOOKS, [s.d.]) ou usar mapas para simplificar o mundo (BARES et al., 2019 apud KIM, 2021). - Algoritmização: desenvolver o conjunto de instruções, passo a passo, necessário para atravessar uma rua com semáforo (ZHANG; WANG; ZHANG, 2019 apud KIM, 2021) ou para um robô fazer um sanduíche (EDTECHBOOKS, [s.d.]). - Debugging: atividades que envolvem encontrar e corrigir erros em programas (EDTECHBOOKS, [s.d.]). ´Projetos Integrados: projetos em grupo que refletem a prática industrial (University of Cambridge, [s.d.]), design de estruturas usando software de engenharia (EDTECHBOOKS, [s.d.]), simulações de construção (EDTECHBOOKS, [s.d.]), e projetos que demonstram habilidades em ciência da computação como a criação e aplicação de algoritmos (University of Cambridge, [s.d.]).\nRecursos Didáticos Adicionais: Livros como “Algorithms: A Problem Solving Journey” (DE KESEL; JANSKENS; DE LAET, 2019 apud KIM, 2021) e “Computer Science: A Problem-Solving Approach” (Guzdial, 2015 apud KIM, 2021) fornecem exemplos e explicações. Materiais com pseudocódigo e fluxogramas são utilizados para apoiar o aprendizado (KIM; LEE, 2018 apud KIM, 2021).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD</span>"
    ]
  },
  {
    "objectID": "estra.html#avaliação-da-aplicação-da-metodologia-daad-no-desempenho-dos-alunos",
    "href": "estra.html#avaliação-da-aplicação-da-metodologia-daad-no-desempenho-dos-alunos",
    "title": "5  Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD",
    "section": "5.3 Avaliação da Aplicação da Metodologia DAAD no Desempenho dos Alunos",
    "text": "5.3 Avaliação da Aplicação da Metodologia DAAD no Desempenho dos Alunos\nA avaliação das habilidades de Pensamento Computacional é um aspecto indispensável para medir o desempenho dos alunos e a eficácia das metodologias de ensino. No entanto, este é um campo em evolução, apresentando desafios relacionados à falta de consenso na definição do Pensamento Computacional e à necessidade de instrumentos validados. A natureza complexa e multifacetada do Pensamento Computacional, que abrange aspectos cognitivos, atitudinais e práticos, exige que a avaliação vá além dos testes de conhecimento tradicionais (KIM; LEE, 2018 apud KIM, 2021).\nUma combinação de exames, avaliação de projetos, rubricas e autoavaliações é essencial para capturar a gama completa de habilidades de Pensamento Computacional (unplugged, [s.d.]). Indicando que as instituições de ensino superior devem desenvolver e implementar abordagens de avaliação abrangentes que reflitam a profundidade e a amplitude do Pensamento Computacional, investindo em design de rubricas detalhadas e incentivando projetos práticos que exijam a aplicação de múltiplos componentes de Pensamento Computacional.\n\n5.3.1 Métodos de Avaliação de Habilidades de Pensamento Computacional/DAAD\nTestes e Exames: testes de múltipla escolha e questões de resposta curta são utilizados para medir o conhecimento e a compreensão de conceitos de Pensamento Computacional (RODRIGO; CABRERA; BARRERA, 2018 apud KIM, 2021). Alguns testes, como o “Computational Thinking Performance Test”3, focam em pensamento lógico, generalização e abstração (RODRIGO; CABRERA; BARRERA, 2018 apud KIM, 2021). A Figure 5.1 exemplifica o tipo de testes de avaliação de Pensamento Computacional que podem ser aplicados, com questões que avaliam a capacidade de decomposição, abstração e algoritmização.\n\n\n\n\n\n\nFigure 5.1: Exemplo de Testes de Avaliação de Pensamento Computacional(GROVER & COENRAAD, 2021)\n\n\n\nAvaliação de Projetos e Portfólios: a avaliação de projetos é util para discernir como os alunos aplicam seus conhecimentos para pensar computacionalmente e projetar artefatos computacionais criativos (YANG et al., 2018 apud KIM, 2021). Portfólios de projetos e tarefas relacionadas são utilizados para documentar o aprendizado (unplugged, [s.d.]). Ao contrário dos testes e exames, a avaliação de portifólio requer avaliação manual ou com o uso de ferramentas de inteligência artificial.\nRubricas: rubricas são ferramentas valiosas para guiar os professores na avaliação de atividades e objetivos de Pensamento Computacional, articulando critérios com descritores de desempenho que demonstram níveis progressivamente mais sofisticados de domínio (KIM; LEE, 2018 apud KIM, 2021). A Universidade de Delaware, por exemplo, desenvolveu uma rubrica para Pensamento Computacional com quatro dimensões: decomposição, algoritmos, dados e abstração (KIM; LEE, 2018 apud KIM, 2021). A Table 5.1 apresenta um exemplo de rubrica para avaliação de habilidades de Pensamento Computacional.\n\n\n\nTable 5.1: Exmeplo de Rubrica para Avaliação de Habilidades de Pensamento Computacional (COMPUTER CIENCE TEACHER ASSOCIATION, 2011).\n\n\n\n\n\n\n\n\n\n\n\n\nCritérios\nCapstone (4)\nMarco (3)\nMarco (2)\nReferência (1)\n\n\n\n\nDecomposição do Problema Dividir tarefas em partes menores e gerenciáveis\nIdentifica um problema de grande escala. Divide o problema em partes menores e gerenciáveis. Identifica variáveis do problema e omite variáveis estranhas. Determina quais variáveis são controláveis e quais são determinadas por fatores externos.\n\n\n\n\n\nAbstração Reduzir a complexidade para definir a ideia principal\nIdentifica características de algo para reduzir a um conjunto de características essenciais. Encontra semelhanças e desconsidera diferenças sem importância em processos ou objetos. Reduz um conjunto de dados a uma representação simplificada (modelo).\n\n\n\n\n\nAlgoritmos Série de passos ordenados tomados para resolver um problema ou atingir um objetivo\nDesenvolve uma sequência de passos ou instruções para realizar uma tarefa ou resolver um problema. Refina um algoritmo com base em testes sob diferentes cenários (entradas) para correção e eficiência.\n\n\n\n\n\nAutomação Habilitar computadores ou máquinas para realizar tarefas repetitivas ou tediosas\nIdentifica oportunidades e benefícios da automação; Usa ferramentas automatizadas para realizar tarefas rotineiras; Articula os prós e contras da automação na sociedade; Cria um artefato que envolve automação (ex: um programa, máquina, modelo de máquina).\n\n\n\n\n\nSimulação Representação ou modelo de um processo. Também envolve a execução de experimentos usando modelos\nCria uma simulação de um processo usando software, animação, pessoas, objetos, planilha ou outro meio apropriado.\n\n\n\n\n\nParalelização Organizar recursos para realizar tarefas simultaneamente para atingir um objetivo comum\nEm um projeto com muitas subtarefas, identifica tarefas que precisam ser feitas sequencialmente e tarefas que podem ser feitas simultaneamente, e quando os pontos de verificação precisam ser feitos e as coisas reunidas para cumprir os prazos de forma eficiente.\n\n\n\n\n\nColeta de Dados Reunir informações apropriadas\nDado um problema, projeto ou estudo, determina as informações apropriadas a serem coletadas e é capaz de identificar informações estranhas e inúteis para coletar. Desenha instrumentos (ex: pesquisas, experimentos) para coletar os dados apropriados (qualitativos ou quantitativos).\n\n\n\n\n\nRepresentação de Dados Determinar representações eficazes\nDetermina representações eficazes (ex: tabelas, gráficos, diagramas) ou visualizações para ajudar a extrair conclusões significativas de um conjunto de dados brutos.\n\n\n\n\n\nAnálise de Dados Usando visualização de dados ou ferramentas estatísticas, identifica e descreve tendências e padrões em um conjunto de dados, e testa hipóteses ou conclusões propostas\nUsando visualização de dados ou ferramentas estatísticas, identifica e descreve tendências e padrões em um conjunto de dados, e testa hipóteses ou conclusões propostas.\n\n\n\n\n\n\n\n\n\nAutoavaliação e Pesquisas: escalas psicométricas e questionários de autoavaliação são empregados para medir a percepção dos alunos sobre suas próprias habilidades de Pensamento Computacional e sua autoeficácia (BAO et al., 2019 apud KIM, 2021).\nObservação e Entrevistas: A observação em sala de aula e as entrevistas, individuais ou em grupo, são técnicas de avaliação formativa que fornecem percepções sobre o engajamento dos alunos no Pensamento Computacional e suas estratégias de resolução de problemas (BAO et al., 2019 apud KIM, 2021).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD</span>"
    ]
  },
  {
    "objectID": "estra.html#ferramentas-e-instrumentos-de-avaliação",
    "href": "estra.html#ferramentas-e-instrumentos-de-avaliação",
    "title": "5  Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD",
    "section": "5.4 Ferramentas e Instrumentos de Avaliação",
    "text": "5.4 Ferramentas e Instrumentos de Avaliação\nUniCTCheck (CTScore e CTProg): um método inovador para avaliar habilidades de Pensamento Computacional em alunos universitários de Ciência da Computação. O CTScore é um aplicativo web interativo que mede sete componentes de Pensamento Computacional, reconhecimento de padrões, pensamento criativo, pensamento algorítmico, resolução de problemas, pensamento crítico, decomposição e abstração, por meio de \\(12\\) questões. O CTProg é uma escala psicométrica que mede a compreensão conceitual de cinco fundamentos de programação, direções básicas e sequências, condicionais, laços de repetição, funções, estruturas de dados (KIM; LEE, 2018 apud KIM, 2021).\nBebras Questions: utilizadas como ferramenta de teste para analisar melhorias nas capacidades de Pensamento Computacional para crianças e adolescentes (RODRIGO; CABRERA; BARRERA, 2018 apud KIM, 2021).\nDr. Scratch, LOGO, C, C++, AgentCubes: linguagens, ferramentas de depuração, e teste mencionadas como ferramentas de avaliação que podem ser utilizadas para aprimorar o Pensamento Computacional, com foco principal no treinamento de habilidades de programação (MAO; CAO; HE, 2018 apud KIM, 2021).\nApesar do crescimento na pesquisa sobre avaliação de Pensamento Computacional, ainda existe uma falta de consenso na descrição ou nas partes constituintes do Pensamento Computacional, o que dificulta a padronização e validação de instrumentos de avaliação (SUNG et al., 2017 apud KIM, 2021). Muitos estudos apontam para a necessidade de mais pesquisas para desenvolver e validar uma conceituação teórica robusta do Pensamento Computacional e, consequentemente, ferramentas de avaliação mais eficazes (SUNG et al., 2017 apud KIM, 2021). Para o avanço da educação em Pensamento Computacional, é importante que a comunidade acadêmica continue a colaborar na definição e operacionalização do Pensamento Computacional, o que, por sua vez, permitirá o desenvolvimento de instrumentos de avaliação mais rigorosos e comparáveis. Isso é indispensável para medir o impaPensamento Computacionalo das intervenções pedagógicas e garantir a qualidade da educação em Pensamento Computacional.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD</span>"
    ]
  },
  {
    "objectID": "estra.html#melhores-práticas-e-desafios-na-implementação-de-metodologias-de-resolução-de-problemas",
    "href": "estra.html#melhores-práticas-e-desafios-na-implementação-de-metodologias-de-resolução-de-problemas",
    "title": "5  Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD",
    "section": "5.5 Melhores Práticas e Desafios na Implementação de Metodologias de Resolução de Problemas",
    "text": "5.5 Melhores Práticas e Desafios na Implementação de Metodologias de Resolução de Problemas\nA implementação de metodologias de resolução de problemas, como o Pensamento Computacional e seus componentes DAAD, no ensino superior apresenta tanto oportunidades significativas quanto obstáculos consideráveis. Existe uma lacuna notável entre a teoria e a prática na implementação do Pensamento Computacional. Embora a literatura acadêmica amplamente reconheça a importância e os benefícios do Pensamento Computacional (EDTECHBOOKS, [s.d.]), os desafios comuns revelam uma dificuldade significativa em traduzir essa importância em práticas educacionais eficazes e generalizadas (KIM; LEE, 2018 apud KIM, 2021). A falta de clareza na definição do Pensamento Computacional, a preparação inadequada dos professores e a dificuldade de integração curricular são barreiras recorrentes que impedem a adoção em larga escala.\n\n5.5.1 Melhores Práticas Identificadas\nO Pensamento Computacional é mais eficaz quando integrado em diversas disciplinas, não apenas na ciência da computação (WANG; XING, 2016 apud KIM, 2021). Essa abordagem permite que os alunos apliquem o Pensamento Computacional a problemas relevantes para suas áreas de estudo, desde a análise de dados históricos até a otimização de processos logísticos (WANG; XING, 2016 apud KIM, 2021). A contextualização dos problemas em cenários do mundo real ou em suas próprias pesquisas aumenta o engajamento dos alunos (KALELKAR et al., 2019 apud KIM, 2021).\nO ensino integral, voltado para a formação do indivíduo presupõe que. além das habilidades técnicas, o ensino de Pensamento Computacional deve cultivar atitudes como confiança na resolução de problemas, persistência diante de desafios, tolerância a diferenças e capacidade de colaborar (EDTECHBOOKS, [s.d.]). A aprendizagem baseada em projetos e atividades unplugged são eficazes para fomentar essa mentalidade (RODRIGO; CABRERA; BARRERA, 2018 apud KIM, 2021).\nDo ponto de vista do profissional da educação, será indispensável garantir que os professores tenham um alto nível de conhecimento e prontidão em Pensamento Computacional (MAO; CAO; HE, 2018 apud KIM, 2021). Programas de desenvolvimento profissional que oferecem ferramentas e ideias aprofundadas para a integração do Pensamento Computacional são essenciais (PARK; KIM, 2018 apud KIM, 2021). Isso inclui o apoio aos professores para criar novos materiais instrucionais e adaptar suas estratégias pedagógicas (MAO; CAO; HE, 2018 apud KIM, 2021).\nFinalmente, introduzir conceitos de Pensamento Computacional de forma gradual, revisitando e expandindo a compreensão ao longo do currículo, é uma prática eficaz (MARCHAL; MOFFAT; VAN DER VEER, 2012 apud KIM, 2021). Começar com atividades unplugged e progredir para desafios de programação plugged pode otimizar o aprendizado (RODRIGO; CABRERA; BARRERA, 2018 apud KIM, 2021).\n\n\n5.5.2 Desafios Comuns\nO primeiro desafio surge da falta de consenso na definição e operacionalização do ensino de Pensamento Computacional. Neste cenário, uma das maiores dificuldades é a ausência de uma definição única e universalmente aceita de Pensamento Computacional (unplugged, [s.d.]). Essa ambiguidade afeta o design do currículo, a seleção de tópicos e, principalmente, a avaliação das habilidades dos alunos. Além disso, muitos educadores carecem de compreensão, confiança e habilidades necessárias para implementar o Pensamento Computacional de forma eficaz (KIM; LEE, 2018 apud KIM, 2021). A expectativa de que as habilidades de Pensamento Computacional se desenvolvam naturalmente em alunos de ciência da computação é muitas vezes inadequada e irreal (ZHANG et al., 2018 apud KIM, 2021).\nA integração do Pensamento Computacional em currículos já estabelecidos, especialmente em disciplinas não diretamente relacionadas com ciência, matemática e as engenharias, pode ser um desafio devido à falta de uma abordagem padronizada (TSAI; TSAI, 2018 apud KIM, 2021). Alguns conceitos e práticas de Pensamento Computacional, como condicionais, dados, operadores, testes e depuração, e abstração/modularização, são identificados como difíceis de aprender para alunos iniciantes (LIU et al., 2019 apud KIM, 2021). Isso pode levar a uma falta de engajamento e persistência dos alunos (LIU et al., 2019 apud KIM, 2021).\nA avaliação das capacidades de realização do Pensamento Computacional é complexa e as ferramentas existentes são limitadas, muitas vezes focando em percepção-atitude ou testes de múltipla escolha simples (KIM; LEE, 2018 apud KIM, 2021). Há uma necessidade de pesquisa e implantação de instrumentos mais rigorosos e validados (SUNG et al., 2017 apud KIM, 2021).\nApesar dos desafios, a própria natureza do Pensamento Computacional, que enfatiza a resolução de problemas, a criatividade e a colaboração (EDTECHBOOKS, [s.d.]), impulsiona a adoção de pedagogias inovadoras como a aprendizagem baseada em projetos e atividades unplugged (RODRIGO; CABRERA; BARRERA, 2018 apud KIM, 2021). Além disso, a aplicabilidade universal do Pensamento Computacional, incentiva a colaboração entre diferentes departamentos e disciplinas (WANG; XING, 2016 apud KIM, 2021). Esta universalidade se dá porque o Pensamento Computacional não é apenas um conjunto de habilidades a ser ensinado, mas uma filosofia que pode transformar a própria abordagem pedagógica nas universidades. Ao invés de ser visto como um fardo adicional, o ensino do Pensamento Computacional pode ser uma oportunidade para as instituições de ensino superior inovarem em suas metodologias, promoverem a aprendizagem ativa e prepararem os alunos de forma mais holística para os desafios complexos do século XXI, fomentando uma cultura de resolução de problemas e inovação em todo o campus.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD</span>"
    ]
  },
  {
    "objectID": "estra.html#footnotes",
    "href": "estra.html#footnotes",
    "title": "5  Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD",
    "section": "",
    "text": "disponível em: Scratch.↩︎\ndisponível em: XLogo4Schools.↩︎\nem tradução livre: Teste de Desempenho de Pensamento Computacional.↩︎",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Estratégias Pedagógicas e Materiais Didáticos para o Ensino de DAAD</span>"
    ]
  },
  {
    "objectID": "desen.html",
    "href": "desen.html",
    "title": "6  Projeto de Disciplina de Raciocínio Algorítmico",
    "section": "",
    "text": "6.1 Módulo 1: Semanas 1-3 (12 Horas-Aula): Introdução ao Pensamento Computacional e Decomposição\nEste módulo foca na compreensão conceitual do Pensamento Computacional e sua importância, explorando a Decomposição segundo a definição “como quebrar problemas complexos em subproblemas menores e identificáveis” (FRONTIERS, 2022).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Projeto de Disciplina de Raciocínio Algorítmico</span>"
    ]
  },
  {
    "objectID": "desen.html#sec-fluxo1",
    "href": "desen.html#sec-fluxo1",
    "title": "6  Projeto de Disciplina de Raciocínio Algorítmico",
    "section": "",
    "text": "Atividades Desplugadas (unplugged): serão utilizadas atividades sem computador para ilustrar a decomposição. Exemplos incluem “fazer um bolo”, “fazer um sanduíche de presunto e queijo” ou “Programar o Professor”. A descrição destas atividades está disponível no Chapter 8.\nFluxogramas e Algoritmos Simples: introdução às técnicas de fluxogramas para a definição de algoritmos e solução de problemas simples. Serão realizados exercícios de algoritmos na forma de fluxogramas, seguindo o padrão IEEE e apenas os módulos referentes a Inicio, Fim, Atribuição e Decisão aplicando diretamente os princípios de decomposição. Estes exercícios estão disponíveis no ?sec-apendice2.\nEstruturas Sintáticas Modulares: introdução aos conceitos de artefatos sintáticos para laços de repetição (for, while, do while) e funções, na forma de módulos reutilizáveis criados por blocos de fluxogramas. Exercícios de fluxogramas para induzir a reutilização de conjuntos de blocos. Estes exercícios estão disponíveis no ?sec-apendice3. A Figure 6.1 resume o padrão IEEE e as estruturas básicas e os blocos necessários para for, while, do while.\n\n\n\n\n\n\n\nResumo do Padrão IEEE para Fluxogramas\n\n\n\n\nFigure 6.1",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Projeto de Disciplina de Raciocínio Algorítmico</span>"
    ]
  },
  {
    "objectID": "desen.html#módulo-2-semanas-4-8-20-horas-aula-abstração-e-reconhecimento-de-padrões",
    "href": "desen.html#módulo-2-semanas-4-8-20-horas-aula-abstração-e-reconhecimento-de-padrões",
    "title": "6  Projeto de Disciplina de Raciocínio Algorítmico",
    "section": "6.2 Módulo 2: Semanas 4-8 (20 Horas-Aula): Abstração e Reconhecimento de Padrões",
    "text": "6.2 Módulo 2: Semanas 4-8 (20 Horas-Aula): Abstração e Reconhecimento de Padrões\nNesta fase, embora o reconhecimento de padrões não esteja explicitamente no acrônimo DAAD, esta técnica é um elemento essencial do Pensamento Computacional e da resolução de problemas, frequentemente agrupado com abstração em ferramentas de Pensamento Computacional (FRONTIERS, 2022). Isso implica a necessidade de ensinar a compreensão da abstração: identificar informações essenciais, ignorar detalhes irrelevantes e criar modelos simplificados (FRONTIERS, 2022). Exercícios de Fluxograma mais complexos e livres de padrões serão propostos para induzir a criatividade, além de fomentar a capacidade de reconhecimento de padrões, ou seja, a capacidade de identificar similaridades, tendências e generalizações (FRONTIERS, 2022).\n\nIntrodução à Linguagem C++ (Compatibilidade C): Introdução à Linguagem de Programação C++, obrigatoriamente em forma de compatibilidade com a Linguagem C, usando indispensavelmente a palavra-chave goto para refazer exatamente os mesmos exercícios aplicados na Section 6.1.\nAbstração na Programação com C++: Aplicação da abstração na programação: criação de componentes reutilizáveis, funções, laços de repetição e estruturas de dados (PENN STATE, [s.d.]). Utilizando a Linguagem C++ com as abstrações de função, for, while, do while, para refazer exatamente os mesmos exercícios aplicados na Section 6.1.\nEstruturas de Dados Simples: Definição e aplicação de estruturas de dados simples como vectors, arrays e structs. Neste ponto, serão aplicados os primeiros exercícios complexos. Os alunos ainda precisarão fazer o fluxograma e validar a solução antes de desenvolver o código. Estes exercícios estão disponíveis no ?sec-apendice4.\nExercícios Avançados de Interpretação: Serão propostos exercícios avançados de visualização de dados (DIGITAL PROMISE, 2022), simulação de sistemas com modelos simplificados (LEHMANN, 2024) e identificação de padrões de código recorrentes para refatoração. Problemas que requeiram interpretação para encontrar as soluções de decomposição e abstração.\nTrabalho Extraclasse 1: os alunos deverão desenvolver o projeto de um sistemas especialista simples. A entrega, com correção automática e análise por inteligência artificial, deverá ser feita em um repositório público, como o GitHub na aula da semana 10. Os enunciados destes sistemas especialistas estão disponíveis no ?sec-apendice5.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Projeto de Disciplina de Raciocínio Algorítmico</span>"
    ]
  },
  {
    "objectID": "desen.html#módulo-3-semanas-9-13-20-horas-aula-algoritmização-e-estruturas-de-dados",
    "href": "desen.html#módulo-3-semanas-9-13-20-horas-aula-algoritmização-e-estruturas-de-dados",
    "title": "6  Projeto de Disciplina de Raciocínio Algorítmico",
    "section": "6.3 Módulo 3: Semanas 9-13 (20 Horas-Aula): Algoritmização e Estruturas de Dados",
    "text": "6.3 Módulo 3: Semanas 9-13 (20 Horas-Aula): Algoritmização e Estruturas de Dados\nNesta fase, o foco será no Design de Algoritmos, priorizando o desenvolvimento de procedimentos passo a passo, análise de eficiência e complexidade algorítmica (FRONTIERS, 2022).\n\nAlgoritmos Comuns: Estudo de algoritmos comuns: busca (linear, binária), ordenação (bubble sort, quick sort) e algoritmos básicos de grafos (transversalidade) (PENN STATE, [s.d.]). Sem a matemática envolvida. Porém, forçando a análise dos custos computacionais, complexidade, relacionada a estes algoritmos. O professor deve introduzir o conceito de pseudocódigo, usando como comparação os fluxogramas já vistos. Os pseudocódigos e fluxogramas das estruturas propostas estão disponíveis no ?sec-apendice6.\nEstruturas de Dados: listas, árvores, grafos e tabelas hash (PENN STATE, [s.d.]). A partir deste ponto, os alunos devem ser escolher entre fluxogramas, ou pseudocódigo, para definir as estruturas de dados antes de implementar o código correspondente em C++. Todos os entregáveis devem incluir o pseudocódigo ou o fluxograma, além da implementação em C++ em um ambiente online. Os exercícios de estruturas de dados estão disponíveis no ?sec-apendice7.\nTarefas de Programação e Análise: Tarefas de programação que exigem a implementação e análise de algoritmos. Serão propostos exercícios que requeiram interpretação para encontrar as soluções de decomposição, abstração e algoritmização. A partir deste ponto, o professor deve introduzir o uso de pseudocódigo e deixar o uso, ou não, de fluxogramas a critério dos alunos. Estes exercícios estão disponíveis no ?sec-apendice8.\nTrabalho Extraclasse 2: os alunos deverão desenvolver o projeto de um sistema especialista mais complexo, que exija a aplicação de algoritmos e estruturas de dados. A entrega, com correção automática e análise por inteligência artificial, deverá ser feita em um repositório público, como o GitHub na aula da semana 16. Os enunciados destes sistemas especialistas estão disponíveis no ?sec-apendice9.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Projeto de Disciplina de Raciocínio Algorítmico</span>"
    ]
  },
  {
    "objectID": "desen.html#módulo-4-semanas-14-16-12-horas-aula-depuração-e-aplicação-em-projetos",
    "href": "desen.html#módulo-4-semanas-14-16-12-horas-aula-depuração-e-aplicação-em-projetos",
    "title": "6  Projeto de Disciplina de Raciocínio Algorítmico",
    "section": "6.4 Módulo 4: Semanas 14-16 (12 Horas-Aula): Depuração e Aplicação em Projetos",
    "text": "6.4 Módulo 4: Semanas 14-16 (12 Horas-Aula): Depuração e Aplicação em Projetos\nEsta etapa final se concentrará na Depuração Sistemática: identificação de erros, técnicas de teste e rastreamento de execução de programas (FRONTIERS, 2022). Este é o fim do std::cout.\n\nPrincípios de Teste de Software: Serão abordados os princípios de teste de software (teste de unidade, teste de integração) (FRONTIERS, 2022). De forma teórica, mas com exercícios práticos de depuração.\nSistemas de Controle de Versão: Introdução a sistemas de controle de versão (ex: Git no GitHub) para desenvolvimento colaborativo e rastreamento de erros.\nTrabalho Extraclasse 3: Os alunos desenvolverão um Projeto, que exigirá a aplicação integrada de todos os elementos DAAD para resolver um problema maior e mais complexo do mundo real, com forte ênfase no desenvolvimento iterativo e na depuração contínua (LEHMANN, 2023). O enunciado deste projeto está disponível no ?sec-apendice10. A entrega, com correção automática e análise por inteligência artificial, deverá ser feita em um repositório público, como o GitHub na aula da semana 18.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Projeto de Disciplina de Raciocínio Algorítmico</span>"
    ]
  },
  {
    "objectID": "desen.html#objetivos-de-aprendizagem-essenciais",
    "href": "desen.html#objetivos-de-aprendizagem-essenciais",
    "title": "6  Projeto de Disciplina de Raciocínio Algorítmico",
    "section": "6.5 Objetivos de Aprendizagem Essenciais",
    "text": "6.5 Objetivos de Aprendizagem Essenciais\nAo final da disciplina, os alunos deverão ser capazes de:\n\nDecomposição: decompor problemas computacionais complexos em subproblemas menores e gerenciáveis, identificando interfaces claras entre eles.\nAbstração: identificar características essenciais e informações relevantes de um problema, criando modelos ou representações generalizadas, e aplicar múltiplos níveis de abstração para gerenciar a complexidade.\nAlgoritmização: projetar procedimentos passo a passo eficientes e corretos, algoritmos, para resolver problemas decompostos, e expressá-los usando pseudocódigo e uma linguagem de programação escolhida.\nDepuração: identificar, localizar e corrigir sistematicamente erros em seus próprios códigos e nos de outros, empregando diversas estratégias de depuração e teste.\nResolução de Problemas: aplicar a metodologia DAAD de forma iterativa para resolver desafios computacionais e de engenharia novos, demonstrando pensamento analítico.\nColaboração: Trabalhar eficazmente em equipes em projetos de programação, utilizando ferramentas e práticas colaborativas.\nComunicação: Articular claramente definições de problemas, soluções algorítmicas e processos de depuração para públicos técnicos e não técnicos.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Projeto de Disciplina de Raciocínio Algorítmico</span>"
    ]
  },
  {
    "objectID": "confim.html",
    "href": "confim.html",
    "title": "7  Considerações Finais",
    "section": "",
    "text": "7.1 Recomendações para o Design Curricular, Estratégias Pedagógicas e Avaliação no Ensino Superior de Ciência e Engenharia da Computação\nAvaliação: apesar de, neste trabalho, não termos abordado a avaliação de forma mais aprofundada, é importante ressaltar que a avaliação do Pensamento Computacional deve ser abrangente e multidimensional, refletindo a complexidade das habilidades envolvidas. Adotar abordagens de avaliação multimodal que combinem testes de conhecimento, avaliação de projetos com rubricas detalhadas e autoavaliações. Essa combinação permite capturar a complexidade das habilidades de Pensamento Computacional em suas diversas dimensões, cognitiva, prática e atitudinal. Finalmente, as instituições devem contribuir para a pesquisa em avaliação de Pensamento Computacional, buscando o desenvolvimento de instrumentos validados e a padronização de métricas. Isso é indispensável para permitir comparações entre diferentes abordagens pedagógicas e para o aprimoramento contínuo da educação em Pensamento Computacional.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Considerações Finais</span>"
    ]
  },
  {
    "objectID": "confim.html#recomendações-para-o-design-curricular-estratégias-pedagógicas-e-avaliação-no-ensino-superior-de-ciência-e-engenharia-da-computação",
    "href": "confim.html#recomendações-para-o-design-curricular-estratégias-pedagógicas-e-avaliação-no-ensino-superior-de-ciência-e-engenharia-da-computação",
    "title": "7  Considerações Finais",
    "section": "",
    "text": "Design Curricular: o projeto do currículo de formação do aluno deve ser centrado no aluno, com foco na construção de habilidades de Pensamento Computacional por meio da prática e da aplicação em problemas do mundo real. A integração dos componentes DAAD deve ser feita de forma progressiva, começando com conceitos básicos e avançando para aplicações mais complexas.\n\nFormalização da Integração: as universidades devem formalizar a integração dos componentes DAAD em disciplinas introdutórias e avançadas, tanto para estudantes de Ciência e Engenharia da Computação quanto para todas as áreas diretamente relacionadas, nos estudos de ciência, matemática e engenharia e mesmo em áreas tipicamente distantes como direto e medicina. Isso garante que todos os alunos desenvolvam uma base sólida de Pensamento Computacional. E possam usufruir das estruturas cognitiva para a solução de problemas reais.\nCurrículos Modulares e Flexíveis: desenvolver currículos modulares que permitam flexibilidade e adaptação a diferentes cargas horárias. Um módulo dedicado de aproximadamente \\(80\\) horas-aula, focado nos fundamentos e aplicações práticas do Pensamento Computacional, pode ser um formato eficaz para aprofundar essas habilidades em cursos de Ciência e Engenharia da Computação. Mas pode ser excessivo para outras áreas do conhecimento.\nIncentivo à Interdisciplinaridade: promover ativamente a integração interdisciplinar do Pensamento Computacional, criando oportunidades para que os alunos apliquem o raciocínio computacional em problemas relevantes para diversas áreas do conhecimento, demonstrando a universalidade e o valor prático dessas habilidades.\n\nEstratégias Pedagógicas: o conjunto de estratégias pedagógicas adequadas ao ensino de Pensamento Computacional é, como vimos, diverso. Contudo, podemos destacar a necessidade de:\n\nPriorização da Aprendizagem Ativa: priorizar metodologias de aprendizagem ativa, como Aprendizagem Baseada em Projetos e Aprendizagem Baseada em Problemas, para promover a aplicação prática do Pensamento Computacional e o desenvolvimento de uma mentalidade de resolução de problemas e perseverança.\nAbordagem Progressiva: utilizar uma abordagem didática progressiva, começando com atividades unplugged para construir a compreensão conceitual dos componentes DAAD antes de introduzir as atividades plugged. Essa transição gradual deve ajudar a solidificar o aprendizado e a reduzir barreiras iniciais.\nCapacitação Docente Contínua: investir em programas de desenvolvimento profissional contínuo para os professores, focando tanto no aprofundamento do conhecimento em Pensamento Computacional quanto nas estratégias pedagógicas eficazes para seu ensino. Os professores devem ser capacitados para atuar como facilitadores e diagnosticadores, guiando os alunos em vez de apenas transmitir informações.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Considerações Finais</span>"
    ]
  },
  {
    "objectID": "confim.html#direções-futuras-para-o-daad",
    "href": "confim.html#direções-futuras-para-o-daad",
    "title": "7  Considerações Finais",
    "section": "7.2 Direções Futuras para o DAAD",
    "text": "7.2 Direções Futuras para o DAAD\nPara consolidar o modelo:\nTestes empíricos em cursos de engenharia de software (ex.: análise comparativa DAAD vs. Agile);\nIntegração com ferramentas de automação (ex.: depuradores inteligentes para validação em tempo real);\nExpansão para áreas emergentes (ex.: quantum computing, onde Debugging requer novas abordagens).\nConclusão: O DAAD emerge como uma evolução pedagógica de _framework_s tradicionais, combinando rigor acadêmico com demandas industriais. Sua originalidade reside na ciclicidade entre criação e validação – um gap não endereçado por modelos concorrentes.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Considerações Finais</span>"
    ]
  },
  {
    "objectID": "referencias.html",
    "href": "referencias.html",
    "title": "Referências",
    "section": "",
    "text": "[1] AI\nINDEX STEERING COMMITTEE. 2025 AI Index Report.\nStanford, CA: Stanford Institute for Human-Centered Artificial\nIntelligence, 2025. Disponível em: &lt;https://hai.stanford.edu/ai-index/2025-ai-index-report&gt;.\nAcesso em: 10 jul. 2025.\n\n\n[2] BIRD, R.; DE MOOR, O. Algebra of\nProgramming. [s.l.] Prentice Hall, 1997. \n\n\n[3] BRACKMANN, C. P. et al. Unplugged versus\nplugged-in: examining basic programming achievement and computational\nthinking of 6th-grade students. Journal of Computer Science\nEducation, 2022. \n\n\n[4] BRASIL. Relatório Síntese de Área:\nEngenharia de Computação. Brasília, DF: Ministério da Educação,\nInstituto Nacional de Estudos e Pesquisas Educacionais Anísio Teixeira\n(Inep), Diretoria de Avaliação da Educação Superior (Daes), 2023.\nDisponível em: &lt;https://download.inep.gov.br/educacao_superior/enade/relatorio_sintese/2023/engenharia_de_computacao.pdf&gt;.\nAcesso em: 10 jul. 2025.\n\n\n[5] BRASIL. Síntese de área: Ciência da\nComputação (Bacharelado/Licenciatura). Brasília, DF: Ministério\nda Educação, Instituto Nacional de Estudos e Pesquisas Educacionais\nAnísio Teixeira (Inep), Diretoria de Avaliação da Educação Superior\n(Daes), 2021. Disponível em: &lt;https://download.inep.gov.br/educacao_superior/enade/relatorio_sintese/2021/Enade_2021_Relatorios_Sintese_Area_Ciencia_Computacao.pdf&gt;.\nAcesso em: 10 jul. 2025.\n\n\n[6] CAMBRIDGE MATHS. Cambridge\nMaths., [s.d.][s.d.]. Disponível em: &lt;https://www.cambridgemaths.org/&gt;.\nAcesso em: 12 jul. 2025\n\n\n[7] CHUI, M. et al. The state of AI in\n2022—and a half decade in review. [s.l.] McKinsey &\nCompany, 2022. Disponível em: &lt;https://www.mckinsey.com/~/media/mckinsey/business%20functions/quantumblack/our%20insights/the%20state%20of%20ai%20in%202022%20and%20a%20half%20decade%20in%20review/the-state-of-ai-in-2022-and-a-half-decade-in-review.pdf&gt;.\nAcesso em: 10 jul. 2025.\n\n\n[8] COMPUTER SCIENCE TEACHERS ASSOCIATION.\nComputational Thinking: A Definition for K-12., 2011.\nDisponível em: &lt;https://csteachers.org/teaching-computational-thinking-in-early-elementary/&gt;.\nAcesso em: 7 jul. 2025\n\n\n[9] FELIPUSSI, A. L.; PADUA, C. C. S.\nRelato de aulas com robô programável e Pensamento\nComputacional. Anais do 12º Congresso Brasileiro de Informática\nna Educação. Anais...Recife: SBC, 2023. \n\n\n[10] FUTURA, C. P. O ensino do pensamento\ncomputacional no Brasil na era digital. São Paulo: Fundação\nRoberto Marinho, 2023. \n\n\n[11] GIBBONS, J. Algorithm Design with\nHaskell. University of Oxford, 2020. Acesso em: 10 jul.\n2025\n\n\n[12] GIBBONS, J. Functional Algorithm Design, Part\n0. SIGPLAN Blog, 2020. \n\n\n[13] GÜNDOĞDU, F. et al. Exploring mathematical\nreasoning skills. ScienceDirect, 2023. \n\n\n[14] HARISMAN, Y. et al. Exploring Students’\nMathematical Reasoning Behavior. Education Sciences, v.\n13, 2023. \n\n\n[15] HIEBERT, J.; LEFEVRE, P. Conceptual and\nprocedural knowledge in mathematics: An introductory analysis. Em:\nHIEBERT, J. (Ed.). Conceptual and procedural knowledge: The case\nof mathematics. Hillsdale, NJ: Lawrence Erlbaum Associates,\n1986. p. 1–27. \n\n\n[16] HOARE, C. A. R. An Axiomatic\nBasis for Computer Programming. Communications of the\nACM, v. 12, n. 10, p. 576–580, 1969. \n\n\n[17] HORA, N. DA. O ensino do pensamento\ncomputacional no Brasil na era digital. Futura, 9 fev. 2022.\nDisponível em: &lt;https://futura.frm.org.br/conteudo/professores/artigo/o-ensino-do-pensamento-computacional-no-brasil-na-era-digital&gt;.\nAcesso em: 9 jul. 2025\n\n\n[18] HSU, T.-C.; CHANG, Y.-S.; CHEN, S.-Y. Teaching AI with\ngames: the impact of generative AI drawing on computational thinking\nskills. Education and Information Technologies,\n2025. \n\n\n[19] HURRELL, D. P. Conceptual knowledge OR\nProcedural knowledge OR Conceptual knowledge AND Procedural knowledge:\nwhy the conjunction is important for teachers. Australian\nJournal of Teacher Education, v. 46, n. 2, p. art. 4, 2021.\n\n\n\n[20] KALDEWAIJ, A. Programming: The\nDerivation of Algorithms. [s.l.] Prentice Hall, 1990. \n\n\n[21] KONG, S. et al. Pensamento\nComputacional na Educação: perspectivas internacionais. São\nPaulo: Penso, 2020. \n\n\n[22] KONG, S.-C. et al. Computational\nThinking Education. Singapore: Springer, 2019. \n\n\n[23] LEHMANN, T. H. How\ncurrent perspectives on algorithmic thinking can be applied to students’\nengagement in algorithmatizing tasks. Mathematics Education\nResearch Journal, v. 36, n. 3, p. 609–643, 2024. \n\n\n[24] LEHMANN, T. H. Using algorithmic thinking to\ndesign algorithms: The case of critical path analysis. The\nJournal of Mathematical Behavior, v. 71, p. 101079, 2023.\n\n\n\n[25] LEVESON, N. G. Engineering a\nSafer World: Systems Thinking Applied to Safety. Cambridge,\nMA: MIT Press, 2012. \n\n\n[26] LITHNER, J. A research framework for\nalgorithmic and creative reasoning. Educational Studies in\nMathematics, v. 67, n. 3, p. 255–276, 2008. \n\n\n[27] MEDEIROS, W. M. Pensamento\nComputacional ou Programação? Uma análise de práticas pedagógicas com\nScratch. Dissertação (Mestrado em Educação)—Uberlândia: UFU,\n2024.\n\n\n[28] NATIONAL COUNCIL OF TEACHERS OF MATHEMATICS –\nNCTM. Principles\nand Standards for School Mathematics. Reston, VA: NCTM,\n2000. \n\n\n[29] PAPERT, S. Logo: Computadores e\nEducação. São Paulo: Brasiliense, 1985. \n\n\n[30] POLAT, E.; YILMAZ, R. M. Unplugged versus\nplugged-in: examining basic programming achievement and computational\nthinking of 6th-grade students. Education and Information\nTechnologies, v. 27, p. 9145–9179, 2022. \n\n\n[31] RIBEIRO, L. et al. Entendendo o Pensamento\nComputacional: além da programação. Revista Brasileira de\nInformática na Educação, v. 25, n. 3, p. 45–62, 2017. \n\n\n[32] SAIDIN, N. D. et al. Benefits and\nchallenges of applying computational thinking in education.\nInternational Journal of Information and Education\nTechnology, v. 11, n. 5, p. 248–254, 2021. \n\n\n[33] SBC (SOCIEDADE BRASILEIRA DE COMPUTAÇÃO).\nReferenciais de Formação em Computação: Educação\nBásica. Porto AlegreSBC, 2017. \n\n\n[34] SCRATCH FOUNDATION. Scratch.,\n[s.d.][s.d.]. Disponível em: &lt;https://scratch.mit.edu/&gt;. Acesso\nem: 7 jul. 2025\n\n\n[35] SILVA QUINTO, W. A. et al. Explorando o impacto da\nInteligência Artificial na formação do pensamento crítico entre\nacadêmicos de T.I. na Região Norte do Brasil. Caderno\nPedagógico, v. 22, n. 7, 2025. \n\n\n[36] TSAI, C.-Y.; YANG, Y.-F. The impact of\nunplugged activities on developing computational thinking skills in\nelementary school students. Journal of Educational Technology\n& Society, v. 22, n. 3, p. 77–89, 2019. \n\n\n[37] WING, J. M. Computational\nthinking. Communications of the ACM, v. 49, n. 3,\np. 33–35, mar. 2006. \n\n\n[38] KOSMYNA, N. et al. Your Brain on\nChatGPT: Accumulation of Cognitive Debt when Using an AI Assistant for\nEssay Writing Task., 2025. Disponível em: &lt;https://arxiv.org/abs/2506.08872&gt;\n\n\n[39] BONWELL, C. C.; EISON, J. A.\nActive Learning: Creating Excitement in the\nClassroom. Washington, D.C.: George Washington\nUniversity, School of Education; Human Development, 1991. \n\n\n[40] BRENNAN, K.; RESNICK, M. New\nframeworks for studying and assessing the development of computational\nthinking. Proceedings of the 2012 Annual Meeting of the\nAmerican Educational Research Association.\nAnais...Vancouver, Canada: 2012. \n\n\n[41] WEINTROP, D. et al. Defining\ncomputational thinking for mathematics and science\nclassrooms. Journal of Science Education and\nTechnology, v. 25, n. 1, p. 127–147, 2016.",
    "crumbs": [
      "Referências"
    ]
  },
  {
    "objectID": "apen1.html",
    "href": "apen1.html",
    "title": "8  Apêndice 1 - Atividades Unplugged",
    "section": "",
    "text": "8.1 Fazer um bolo e Fazer um sanduíche de presunto e queijo\nNos dois casos, o professor deve distribuir uma página com pautas contendo a receita do bolo, ou do sanduíche. Divida a sala em grupos e forneça uma receita para cada aluno do grupo. A tarefa consiste em escrever, o mais detalhadamente todas as instruções necessárias para que alguém, que nunca fez um sanduíche, ou um bolo, possa fazer o sanduíche ou o bolo.\nO professor deve enfatizar, todas as tarefas possíveis.\nMaterial necessário: lápis e papel.\nEntrega: a entrega será a lista de tarefas, escritas a mão.\nAvaliação: o professor deve criar uma tabela com 10 notas no quadro, embaralhar as listas, para remover a identificação dos grupos mantendo cada lista anônima e ler cada lista de tarefas destacando os pontos que não foram indicados. Por exemplo: é impossível colocar o queijo no pão sem pegar a fatia de queijo antes. Caberá ao professor destacar as instruções faltantes. Uma vez que a lista tenha sido lida, o professor irá pedir que os alunos levantem a mão para a nota que eles acham que o grupo merece começando em \\(10\\) e marcar a nota que for mais votada. Separe a lista que tiver a maior nota ela será útil para explicar fluxogramas.\nObjetivo: entender o que é dividir um problema em problemas menores e enfatizar a necessidade de detalhamento.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Apêndice 1 - Atividades Unplugged</span>"
    ]
  },
  {
    "objectID": "apen1.html#programar-o-professor",
    "href": "apen1.html#programar-o-professor",
    "title": "8  Apêndice 1 - Atividades Unplugged",
    "section": "8.2 Programar o Professor",
    "text": "8.2 Programar o Professor\nO professor é um automato que só sabe ler e identificar símbolos gráficos e usar o teclado. Além disso o professor tem acesso exclusivo aos seus segredos, como se fosse uma memória interna. Esta tarefa é para ser realizada por todos os alunos da sala que se voluntariem, sem escolha anterior, para determinar as tarefas que o professor deve realizar para passar um e-mail para si mesmo, ou outra tarefa simples.\nAntes de começar Certifique-se que seja possível operar o seu sistema operacional apenas com as teclas tab e enter para conseguir realizar a tarefa que será proposta.\nEm sala, peça a um aluno para anotar todos as instruções que foram realizados com sucesso. Guarde esta lista de instruções para a primeira aula de fluxogramas.\nPara começar a atividade explique os limites da capacidade do professor, compartilhe o desktop do seu computador, sem nenhum aplicativo aberto. Informe que aplicativo, ou site, será necessário para completar a tarefa e pare com as mãos no teclado.\nO professor deve ter apenas duas reações: ou faz o que os alunos pediram ou fica parado imóvel.\nEsta é uma tarefa lúdica que deve provocar interesse e engajamento.\nMaterial necessário: lápis e papel.\nEntrega: lista de tarefas executadas criada pelos alunos.\nAvaliação: esta atividade não requer qualquer tipo de avaliação.\nObjetivo: mostrar os limites de entrada e saída de dados, os limites dos sistemas computacionais, a divisão de problemas em problemas menores.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Apêndice 1 - Atividades Unplugged</span>"
    ]
  },
  {
    "objectID": "apen1.html#importante",
    "href": "apen1.html#importante",
    "title": "8  Apêndice 1 - Atividades Unplugged",
    "section": "8.3 Importante",
    "text": "8.3 Importante\nEstas tarefas são apenas sugestões. O importante é que o professor seja capaz de fazer atividades lúdicas que envolvam toda a turma para a criação de listas de instruções para resolver tarefas simples, relacionadas com atividades cotidianas para criar os constructos cognitivos necessários ao entendimento da divisão de problemas grandes em problemas menores.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Apêndice 1 - Atividades Unplugged</span>"
    ]
  }
]